--- occu/WebUI/www/config/cp_maintenance.cgi.orig
+++ occu/WebUI/www/config/cp_maintenance.cgi
@@ -61,10 +61,14 @@
       puts "conInfo(\"EULA found\");"
       puts "jQuery('#fwUpload').hide();"
       puts "var dlg = new EulaDialog(translateKey('dialogEulaTitle'), data, function(result) {"
+        puts "var dlgPopup = parent.top.dlgPopup;"
+        puts "if (dlgPopup === undefined) {"
+          puts "dlgPopup = window.open('', 'ccu-main-window').dlgPopup;"
+        puts "}"
         puts "if (result == 1) {"
-          puts "parent.top.dlgPopup.hide();"
-          puts "parent.top.dlgPopup.setWidth(450);"
-          puts "parent.top.dlgPopup.LoadFromFile(url, \"action=$action\");"
+          puts "dlgPopup.hide();"
+          puts "dlgPopup.setWidth(450);"
+          puts "dlgPopup.LoadFromFile(url, \"action=$action\");"
         puts "} else {"
           puts "jQuery('#fwUpload').hide();"
           puts "dlgPopup.hide();"
@@ -77,16 +81,19 @@
 
     puts "req.fail(function(data) {"
       puts "conInfo(\"EULA not available\");"
-      puts "parent.top.dlgPopup.hide();"
-      puts "parent.top.dlgPopup.setWidth(450);"
-      puts "parent.top.dlgPopup.LoadFromFile(url, \"action=$action\");"
+      puts "var dlgPopup = parent.top.dlgPopup;"
+      puts "if (dlgPopup === undefined) {"
+        puts "dlgPopup = window.open('', 'ccu-main-window').dlgPopup;"
+      puts "}"
+      puts "dlgPopup.hide();"
+      puts "dlgPopup.setWidth(450);"
+      puts "dlgPopup.LoadFromFile(url, \"action=$action\");"
     puts "});"
   }
 }
 
 proc action_firmware_update_confirm {} {
   global env
-   cgi_debug -on
   http_head
   division {class="popupTitle"} {
     #puts "Softwareupdate - Best&auml;tigung"
@@ -266,7 +273,7 @@
 }
 
 proc action_firmware_update_cancel {} {
-  global env
+  global env filename
 
   if {[getProduct] < 3} {
     catch {exec rm /var/new_firmware.tar.gz}
@@ -432,9 +439,7 @@
             table_row {
               td {width="20"} {}
               table_data {colspan="2"} {
-                form "$env(SCRIPT_NAME)?sid=$sid" name=firmware_form {target=firmware_upload_iframe} enctype=multipart/form-data method=post {
-                  export action=firmware_upload
-                  export downloadOnly=$downloadOnly
+                form "/config/fileupload.ccc?sid=$sid&action=firmware_upload&downloadOnly=$downloadOnly&url=$env(SCRIPT_NAME)" {target=firmware_upload_iframe} name=firmware_form enctype=multipart/form-data method=post {
                   file_button firmware_file size=30 maxlength=1000000
                 }
                 puts {<iframe name="firmware_upload_iframe" style="display: none;"></iframe>}
@@ -1020,7 +1025,7 @@
 
 proc action_firmware_upload {} {
 
-  global env sid downloadOnly
+  global env sid downloadOnly filename
 
   if { [catch { import directDownload } error] } {
     set directDownload false
@@ -1029,10 +1034,7 @@
   http_head
   
   if { $directDownload } {
-    set filename "/tmp/fup.tgz"
-  } else {
-    import_file -client firmware_file
-    set filename [lindex $firmware_file 0]
+    set filename "/usr/local/tmp/firmwareUpdateFile"
   }
 
   if {[getProduct] < 3} {
@@ -1102,10 +1104,14 @@
 
   cgi_javascript {
     puts "var url = \"$env(SCRIPT_NAME)?sid=$sid\";"
-    puts "parent.top.dlgPopup.hide();"
-    puts "parent.top.dlgPopup.setWidth(450);"
-    puts "parent.top.dlgPopup.downloadOnly = $downloadOnly;"
-    puts "parent.top.dlgPopup.LoadFromFile(url, \"action=$action\");"
+    puts "var dlgPopup = parent.top.dlgPopup;"
+    puts "if (dlgPopup === undefined) {"
+      puts "dlgPopup = window.open('', 'ccu-main-window').dlgPopup;"
+    puts "}"
+    puts "dlgPopup.hide();"
+    puts "dlgPopup.setWidth(450);"
+    puts "dlgPopup.downloadOnly = $downloadOnly;"
+    puts "dlgPopup.LoadFromFile(url, \"action=$action\");"
   }
 }
 
@@ -1393,10 +1399,10 @@
 cgi_eval {
   #cgi_debug -on
   cgi_input
-  catch {
-    import debug
-    cgi_debug -on
-  }
+  #catch {
+  #  import debug
+  #  cgi_debug -on
+  #}
 
   set action "put_page"
   set downloadOnly 0
--- occu/WebUI/www/config/cp_network.cgi.orig
+++ occu/WebUI/www/config/cp_network.cgi
@@ -149,6 +149,8 @@
   
   http_head
 
+  file rename -force -- "/usr/local/tmp/server.pem" "/etc/config/server.pem"
+
   put_message "\${dialogSettingsNetworkMessageCertificateTitle}" "\${dialogSettingsNetworkMessageCertificateCCURestart}" {\${btnNewLogin} "window.location.href='/';"}
   
   #save DOM
@@ -245,37 +247,43 @@
 }
 
 proc action_cert_upload {} {
-  global env sid
-  cd /tmp/
+  global env sid filename
+  cd /usr/local/tmp/
   
   http_head
-  import_file -client cert_file
-  file rename -force -- [lindex $cert_file 0] "/var/server.pem"
-  
-  set filename [open "/var/server.pem" r]
-  gets $filename line
-  close $filename
+  set fp [open "$filename" r]
+  gets $fp line
+  close $fp
   #puts $line;
   if { [string equal $line "-----BEGIN RSA PRIVATE KEY-----"] == 1 || [string equal $line "-----BEGIN PRIVATE KEY-----"] == 1} {
-    file copy -force -- "/var/server.pem" "/etc/config/server.pem"
-    file delete "/var/server.pem"
+    file rename -force -- $filename "/usr/local/tmp/server.pem"
     
     cgi_javascript {
       puts "var url = \"$env(SCRIPT_NAME)?sid=$sid\";"
       puts {
-        parent.top.dlgPopup.hide();
-        parent.top.dlgPopup.setWidth(600);
-        parent.top.dlgPopup.LoadFromFile(url, "action=cert_update_confirm");
+        var dlgPopup = parent.top.dlgPopup;
+        if (dlgPopup === undefined) {
+          dlgPopup = window.open('', 'ccu-main-window').dlgPopup;
+        }
+        dlgPopup.hide();
+        dlgPopup.setWidth(600);
+        dlgPopup.LoadFromFile(url, "action=cert_update_confirm");
       }
     }
   } else {
+    file delete -force -- $filename
+
     cgi_javascript {
-    puts "var url = \"$env(SCRIPT_NAME)?sid=$sid\";"
-    puts {
-      parent.top.dlgPopup.hide();
-      parent.top.dlgPopup.setWidth(600);
-      parent.top.dlgPopup.LoadFromFile(url, "action=cert_update_failed");
-    }
+      puts "var url = \"$env(SCRIPT_NAME)?sid=$sid\";"
+      puts {
+        var dlgPopup = parent.top.dlgPopup;
+        if (dlgPopup === undefined) {
+          dlgPopup = window.open('', 'ccu-main-window').dlgPopup;
+        }
+        dlgPopup.hide();
+        dlgPopup.setWidth(600);
+        dlgPopup.LoadFromFile(url, "action=cert_update_failed");
+      }
     }
   }
 }
@@ -459,8 +467,7 @@
             table_row {
               table_data {width="20"} {}
               table_data {colspan="2"} {
-                form "$env(SCRIPT_NAME)?sid=$sid" name=cert_form {target=cert_upload_iframe} enctype=multipart/form-data method=post {
-                  export action=cert_upload
+                form "/config/fileupload.ccc?sid=$sid&action=cert_upload&url=$env(SCRIPT_NAME)" name=cert_form {target=cert_upload_iframe} enctype=multipart/form-data method=post {
                   file_button cert_file size=30 maxlength=1000000
                 }
                 puts {<iframe name="cert_upload_iframe" style="display: none;"></iframe>}
@@ -774,13 +781,16 @@
 cgi_eval {
   #cgi_debug -on
   cgi_input
-  catch {
-    import debug
-    cgi_debug -on
-  }
+  #catch {
+  #  import debug
+  #  cgi_debug -on
+  #}
   set action "put_page"
+  set filename ""
 
   catch { import action }
+  catch { import filename }
+
   if {[session_requestisvalid 8] > 0} then action_$action
 }
 
--- occu/WebUI/www/config/cp_security.cgi.orig
+++ occu/WebUI/www/config/cp_security.cgi
@@ -928,8 +928,6 @@
 proc action_put_page {} {
   global env sid
 
-  cgi_debug -on
-
   http_head
   division {class="popupTitle j_translate"} {
     puts "\${dialogSettingsSecurityTitle}"
@@ -1022,8 +1020,7 @@
             table_row {
               td {width="20"} {}
               table_data {align="left"} {colspan="2"} {
-                form "$env(SCRIPT_NAME)?sid=$sid" name=backup_form {target=config_upload_iframe} enctype=multipart/form-data method=post {
-                  export action=backup_upload
+                form "/config/fileupload.ccc?sid=$sid&action=backup_upload&url=$env(SCRIPT_NAME)" name=backup_form {target=config_upload_iframe} enctype=multipart/form-data method=post {
                   file_button backup_file size=20 maxlength=1000000
                 }
                 puts {<iframe name="config_upload_iframe" class="CLASS20820" style="display: none;"></iframe>}
@@ -1536,19 +1533,21 @@
 }
 
 proc action_backup_upload {} {
-  global env sid
-  cd /tmp/
+  global env sid filename
+  cd /usr/local/tmp/
 
+  file rename -force -- $filename "/usr/local/tmp/new_config.tar"
   http_head
-  import_file -client backup_file
-  file rename -force -- [lindex $backup_file 0] "/tmp/new_config.tar"
   cgi_javascript {
     puts "var url = \"$env(SCRIPT_NAME)?sid=$sid\";"
     puts {
-      //parent.top.ProgressBar.IncCounter("Backup wurde ï¿½bertragen.");
-      parent.top.dlgPopup.hide();
-      parent.top.dlgPopup.setWidth(400);
-      parent.top.dlgPopup.LoadFromFile(url, "action=backup_restore_check");
+      var dlgPopup = parent.top.dlgPopup;
+      if (dlgPopup === undefined) {
+        dlgPopup = window.open('', 'ccu-main-window').dlgPopup;
+      }
+      dlgPopup.hide();
+      dlgPopup.setWidth(400);
+      dlgPopup.LoadFromFile(url, "action=backup_restore_check");
     }
   }
 }
@@ -1617,14 +1616,16 @@
 cgi_eval {
   #cgi_debug -on
   cgi_input
-  catch {
-    import debug
-    cgi_debug -on
-  }
+  #catch {
+  #  import debug
+  #  cgi_debug -on
+  #}
 
   set action "put_page"
+  set filename ""
 
   catch { import action }
+  catch { import filename }
 
   if {[session_requestisvalid 8] > 0} then action_$action
 }
--- occu/WebUI/www/config/cp_software.cgi.orig
+++ occu/WebUI/www/config/cp_software.cgi
@@ -353,8 +353,7 @@
                 puts "\${dialogSettingsExtraSoftwareLblSelectExtraSoftware}"
               }
               table_data {
-                form "$env(SCRIPT_NAME)?sid=$sid" name=upload_form {target=image_upload_iframe} enctype=multipart/form-data method=post {
-                  export action=image_upload
+                form "/config/fileupload.ccc?sid=$sid&action=image_upload&url=$env(SCRIPT_NAME)" name=upload_form {target=image_upload_iframe} enctype=multipart/form-data method=post {
                   file_button firmware_file size=30 maxlength=1000000
                 }
                 puts {<iframe name="image_upload_iframe" style="display: none;"></iframe>}
@@ -487,24 +486,27 @@
 }
 
 proc action_image_upload {} {
-  global env sid
-  cd /tmp/
+  global env sid filename
+  cd /usr/local/tmp/
   
   http_head
-  import_file -client firmware_file
   if {[getProduct] < 3} {
     # CCU2
-    file rename -force -- [lindex $firmware_file 0] "/var/new_firmware.tar.gz"
+    file rename -force -- $filename "/var/new_firmware.tar.gz"
   } else {
     # CCU3
-    file rename -force -- [lindex $firmware_file 0] "/usr/local/tmp/new_addon.tar.gz"
+    file rename -force -- $filename "/usr/local/tmp/new_addon.tar.gz"
   }
   cgi_javascript {
     puts "var url = \"$env(SCRIPT_NAME)?sid=$sid\";"
     puts {
-      parent.top.dlgPopup.hide();
-      parent.top.dlgPopup.setWidth(600);
-      parent.top.dlgPopup.LoadFromFile(url, "action=install_confirm");
+      var dlgPopup = parent.top.dlgPopup;
+      if (dlgPopup === undefined) {
+        dlgPopup = window.open('', 'ccu-main-window').dlgPopup;
+      }
+      dlgPopup.hide();
+      dlgPopup.setWidth(600);
+      dlgPopup.LoadFromFile(url, "action=install_confirm");
     }
   }
 }
@@ -519,14 +521,16 @@
 cgi_eval {
   #cgi_debug -on
   cgi_input
-  catch {
-    import debug
-    cgi_debug -on
-  }
+  #catch {
+  #  import debug
+  #  cgi_debug -on
+  #}
 
   set action "put_page"
+  set filename ""
 
   catch { import action }
+  catch { import filename }
 
   if {[session_requestisvalid 8] > 0} then action_$action
 }
--- occu/WebUI/www/config/fileupload.ccc.orig
+++ occu/WebUI/www/config/fileupload.ccc
@@ -0,0 +1,61 @@
+#!/bin/sh
+# shellcheck shell=dash disable=SC2169,SC2034,SC2154
+
+echo -ne "Content-Type: text/html; charset=iso-8859-1\r\n\r\n"
+
+# fake read boundary+disposition, etc.
+read -r boundary
+read -r disposition
+read -r ctype
+read -r junk
+
+# get length
+a=${#boundary}
+b=${#disposition}
+c=${#ctype}
+d=0
+
+# Due to \n\r line breaks we have 2 extra bytes per line read,
+# 6 + 2 newlines == 10 junk bytes
+a=$((a*2+b+c+d+10))
+
+# extract all params from QUERY_STRING
+# shellcheck disable=SC2046,SC2116,SC2086
+eval $(echo ${QUERY_STRING//&/;})
+
+# calculate the expected content length using
+# HTTP_CONTENT_LENGTH or CONTENT_LENGTH
+if [ -z "${HTTP_CONTENT_LENGTH}" ]; then
+  HTTP_CONTENT_LENGTH=${CONTENT_LENGTH}
+fi
+SIZE=$((HTTP_CONTENT_LENGTH-a))
+
+# write out the data
+filename=$(mktemp -p /usr/local/tmp)
+if ! /usr/bin/head -q -c ${SIZE} >"${filename}"; then
+  echo "ERROR (head)"
+fi
+
+echo "<html>"
+echo " <head>"
+echo "  <script>"
+echo "   <!--- Hide script from browsers that don't understand JavaScript"
+echo "   var url = '${url}?sid=${sid}';"
+echo "   var dlgPopup = parent.top.dlgPopup;"
+echo "   if (dlgPopup === undefined) {"
+echo "     dlgPopup = window.open('', 'ccu-main-window').dlgPopup;"
+echo "   }"
+echo "   if (dlgPopup !== undefined) {"
+echo "     dlgPopup.hide();"
+echo "     dlgPopup.setWidth(450);"
+if [[ -n "${downloadOnly}" ]]; then
+  echo "     dlgPopup.downloadOnly=${downloadOnly};"
+fi
+echo "     dlgPopup.LoadFromFile(url, 'action=${action}&filename=${filename}');"
+echo "   }"
+echo "   // End hiding -->"
+echo "  </script>"
+echo " </head>"
+echo "</html>"
+
+exit 0
--- occu/WebUI/www/tcl/extern/cgi.tcl.orig
+++ occu/WebUI/www/tcl/extern/cgi.tcl
@@ -3,15 +3,11 @@
 # cgi.tcl - routines for writing CGI scripts in Tcl
 # Author: Don Libes <libes@nist.gov>, January '95
 #
-# Minor changes by Lars Reemts, eQ-3
-#
 # These routines implement the code described in the paper
 # "Writing CGI scripts in Tcl" which appeared in the Tcl '96 conference.
 # Please read the paper before using this code.  The paper is:
 # http://expect.nist.gov/doc/cgi.pdf
 #
-# F. Werner:
-#  add "charset=iso-8859-1" to header Content-Type
 ##################################################
 
 ##################################################
@@ -27,12 +23,10 @@
 
     if {0 == [llength $args]} {
 	cgi_content_type
-    cgi_puts "Expires: Sun, 06 Nov 1994 00:00:00 GMT"
     } else {
 	if {[catch {uplevel 1 [lindex $args 0]} errMsg]} {
 	    set savedInfo $errorInfo
 	    cgi_content_type
-        cgi_puts "Expires: Sun, 06 Nov 1994 00:00:00 GMT"
 	}
     }
     cgi_puts ""
@@ -310,7 +304,7 @@
 			    catch {cgi_mail_add "HTTP_HOST: $env(HTTP_HOST)"}
 			    catch {cgi_mail_add "REMOTE_HOST: $env(REMOTE_HOST)"}
 			    catch {cgi_mail_add "REMOTE_ADDR: $env(REMOTE_ADDR)"}
-			    cgi_mail_add "cgi.tcl version: 1.8.0"
+			    cgi_mail_add "cgi.tcl version: 1.10.0"
 			    cgi_mail_add "input:"
 			    catch {cgi_mail_add $_cgi(input)}
 			    cgi_mail_add "cookie:"
@@ -472,10 +466,9 @@
     foreach a [lrange $args 1 end] {
         append buf " $a"
     }
-    return "$buf ></iframe>"
+    return "$buf />"
 }
 
-
 # generate an image reference (<img ...>)
 # first arg is image url
 # other args are passed through into <img> tag
@@ -497,7 +490,7 @@
 
 # names an anchor so that it can be linked to
 proc cgi_anchor_name {name} {
-    return "<a name=\"$name\"></a>"
+    return "<a name=\"$name\"/>"
 }
 
 proc cgi_base {args} {
@@ -513,7 +506,7 @@
 	    cgi_put " $a"
 	}
     }
-    cgi_puts " / >"
+    cgi_puts " />"
 }
 
 ##################################################
@@ -531,7 +524,8 @@
 	regsub -all -nocase {%([a-f0-9][a-f0-9])} $buf {\\u00\1} buf
 
 	# process \u unicode mapped chars
-	encoding convertfrom [subst -novar -nocommand $buf]
+	encoding convertfrom $::_cgi(queryencoding) \
+		 [subst -novar -nocommand $buf]
     }
 } elseif {[info tclversion] >= 8.1} {
     proc cgi_unquote_input buf {
@@ -982,7 +976,7 @@
 # from cgi_http_head.
 proc cgi_http_equiv {type contents} {
     _cgi_http_head_implicit
-    cgi_puts "<meta http-equiv=\"$type\" content=[cgi_dquote_html $contents]></meta>"
+    cgi_puts "<meta http-equiv=\"$type\" content=[cgi_dquote_html $contents]/>"
 }
 
 # Do whatever you want with meta tags.
@@ -1010,7 +1004,7 @@
 	    cgi_put " $a"
 	}
     }
-    cgi_puts "></link>"
+    cgi_puts "/>"
 }
 
 proc cgi_name {args} {
@@ -1114,7 +1108,7 @@
 
 proc cgi_noscript {args} {
     cgi_puts "<noscript[_cgi_lrange $args 0 [expr [llength $args]-2]]>"
-    _cgi_close_proc_push {puts "</noscript>"}
+    _cgi_close_proc_push {cgi_puts "</noscript>"}
 
     uplevel 1 [lindex $args end]
 
@@ -1135,7 +1129,7 @@
     if {$q != "="} {
 	set value ""
     }
-    cgi_puts "<param name=\"$name\" value=[cgi_dquote_html $value]></param>"
+    cgi_puts "<param name=\"$name\" value=[cgi_dquote_html $value]/>"
 }
 
 # record any proc's that must be called prior to displaying an error
@@ -1254,7 +1248,7 @@
 	    cgi_put " $a"
 	}
     }
-    cgi_put "></isindex>"
+    cgi_put "/>"
 }
 
 ##################################################
@@ -1294,15 +1288,31 @@
 	} else {
 	    set length $env(CONTENT_LENGTH)
 	    if {0!=[string compare $length "-1"]} {
-        if { $length } {
-		    set input [read stdin $env(CONTENT_LENGTH)]		
-        } else {
-            set input ""
-        }
+		set input [read stdin $env(CONTENT_LENGTH)]		
 	    } else {
 		set _cgi(client_error) 1
 		error "Your browser generated a content-length of -1 during a POST method."
 	    }
+	    if {[info tclversion] >= 8.1} {
+                # guess query encoding from Content-Type header
+                if {[info exists env(CONTENT_TYPE)] \
+                    && [regexp -nocase -- {charset=([^[:space:]]+)} $env(CONTENT_TYPE) m cs]} {
+                    if {[regexp -nocase -- {iso-?8859-([[:digit:]]+)} $cs m d]} {
+                        set _cgi(queryencoding) "iso8859-$d"
+                    } elseif {[regexp -nocase -- {windows-([[:digit:]]+)} $cs m d]} {
+                        set _cgi(queryencoding) "cp$d"
+                    } elseif {0==[string compare -nocase $cs "utf-8"]} {
+                        set _cgi(queryencoding) "utf-8"
+                    } elseif {0==[string compare -nocase $cs "utf-16"]} {
+                        set _cgi(queryencoding) "unicode"
+                    }
+                    if { [lsearch -exact [encoding names] _cgi(queryencoding)] == -1} {
+                        set _cgi(queryencoding) [encoding system]
+                    }
+                } else {
+                    set _cgi(queryencoding) [encoding system]
+                }
+            }
 	}
 	# save input for possible diagnostics later
 	set _cgi(input) $input
@@ -1345,30 +1355,6 @@
     }
 }
 
-set _cgi_read_line_buffer ""
-proc _cgi_read_line {fin bufvar crlfvar} {
-    global _cgi_read_line_buffer
-    upvar $bufvar buffer
-    upvar $crlfvar crlf
-    set line_end [string first "\r\n" $_cgi_read_line_buffer]
-    while {($line_end < 0 ) && ![eof $fin]} {
-        append _cgi_read_line_buffer [read $fin 65536]
-        set line_end [string first "\r\n" $_cgi_read_line_buffer]
-    }
-    if {$line_end >= 0} { 
-        incr line_end -1
-        set buffer [string range $_cgi_read_line_buffer 0 $line_end]
-        set crlf "\r\n"
-        set _cgi_read_line_buffer [string range $_cgi_read_line_buffer [expr $line_end + 3] end]
-        return 1
-    } else {
-        set buffer $_cgi_read_line_buffer
-        set crlf ""
-        set _cgi_read_line_buffer ""
-        return [expr ([string length $buffer] > 0)]
-    }
-}
-
 proc _cgi_input_multipart {fin} {
     global env _cgi _cgi_uservar _cgi_userfile
 
@@ -1379,121 +1365,7 @@
 	# can hang and we won't get to the termination code
 	set dbg_fout [open $dbg_filename w]
 	set _cgi(input) $dbg_filename
-	catch {fconfigure $dbg_fout -translation binary -encoding binary}
-    }
-
-    # figure out boundary
-    if {0==[regexp boundary=(.*) $env(CONTENT_TYPE) dummy boundary]} {
-	set _cgi(client_error) 1
-	error "Your browser failed to generate a \"boundary=\" line in a multipart response (CONTENT_TYPE: $env(CONTENT_TYPE)).  Please upgrade (or fix) your browser."
-    }
-
-    set boundary "--$boundary"
-    set boundary_length [string length $boundary]
-    
-    # don't corrupt or modify uploads yet allow Tcl 7.4 to work
-    catch {fconfigure $fin -translation binary -encoding binary}
-
-    # get first boundary line
-    gets $fin buf
-    if {[info exists dbg_fout]} {puts $dbg_fout $buf; flush $dbg_fout}
-
-    set filecount 0
-    set crlf ""
-    while {1} {
-	# process Content-Disposition:
-	if { ! [_cgi_read_line $fin buf crlf] } break
-	if {[info exists dbg_fout]} {puts -nonewline $dbg_fout $buf$crlf; flush $dbg_fout}
-	catch {unset filename}
-	catch {unset varname}
-	foreach b $buf {
-	    regexp {^name="(.*)"} $b dummy varname
-	}
-	if {0==[info exists varname]} {
-	    set _cgi(client_error) 1
-	    error "In response to a request for a multipart form, your browser generated a part header without a name field.  Please upgrade (or fix) your browser."
-	}	    
-	# Lame-o encoding (on Netscape at least) doesn't escape field
-	# delimiters (like quotes)!!  Since all we've ever seen is filename=
-	# at end of line, assuming nothing follows.  Sigh.
-	regexp {filename="(.*)"} $buf dummy filename
-
-	# Skip remaining headers until blank line.
-	# Content-Type: can appear here.
-	set conttype ""
-	while {1} {
-            if { ! [_cgi_read_line $fin buf crlf] } break
-	    if {[info exists dbg_fout]} {puts -nonewline $dbg_fout $buf$crlf; flush $dbg_fout}
-	    if {0==[string compare $buf ""]} break
-	    regexp -nocase "^Content-Type:\[ \t]+(.*)\r\n" $buf$crlf x conttype
-	}
-
-	if {[info exists filename]} {
-            if {[info exists dbg_fout]} {puts $dbg_fout ">>>>>Reading file $filename"; flush $dbg_fout}
-	    # read the part into a file
-	    set foutname /tmp/CGI[pid].[incr filecount]
-	    set foutname [file join $_cgi(tmpdir) CGI[pid].[incr filecount]]
-	    set fout [open $foutname w]
-	    # "catch" permits this to work with Tcl 7.4
-	    catch {fconfigure $fout -translation binary -encoding binary}
-	    _cgi_set_uservar $varname [list $foutname $filename $conttype]
-	    set _cgi_userfile($varname) [list $foutname $filename $conttype]
-            
-            set leftover ""
-            while { 1 } {
-                if { ! [_cgi_read_line $fin buf crlf] } {
-                    set _cgi(client_error) 1
-                    error "Unexpected end of input data."
-                }
-		if {[info exists dbg_fout]} {puts -nonewline $dbg_fout $buf$crlf; flush $dbg_fout}
-                if {[string compare -length $boundary_length $buf $boundary] == 0} {
-                    if {[string first "--" $buf $boundary_length]>=0} {set eof 1}
-                    break;
-                }
-                puts -nonewline $fout $leftover$buf
-                set leftover $crlf
-            }
-            if {[info exists dbg_fout]} {puts $dbg_fout ">>>>>Read file $filename"; flush $dbg_fout}
-	    close $fout
-	    unset fout
-        
-	} else {
-	    # read the part into a variable
-            if {[info exists dbg_fout]} {puts $dbg_fout ">>>>>Reading variable $varname"; flush $dbg_fout}
-	    set val ""
-            set leftover ""
-            while { 1 } {
-                if { ! [_cgi_read_line $fin buf crlf] } {
-                    set _cgi(client_error) 1
-                    error "Unexpected end of input data."
-                }
-		if {[info exists dbg_fout]} {puts -nonewline $dbg_fout $buf$crlf; flush $dbg_fout}
-                if {[string compare -length $boundary_length $buf $boundary] == 0} {
-                    if {[string first "--" $buf $boundary_length]>=0} {set eof 1}
-                    break;
-                }
-                append val $leftover$buf
-                set leftover $crlf
-	    }
-	    _cgi_set_uservar $varname $val
-            if {[info exists dbg_fout]} {puts $dbg_fout ">>>>>$varname=$val"; flush $dbg_fout}
-	}
-        if {[info exists eof]} break
-    }
-    if {[info exists dbg_fout]} {close $dbg_fout}
-}
-
-proc _cgi_input_multipart_buggy {fin} {
-    global env _cgi _cgi_uservar _cgi_userfile
-
-    cgi_debug -noprint {
-	# save file for debugging purposes
-	set dbg_filename [file join $_cgi(tmpdir) CGIdbg.[pid]]
-	# explicitly flush all writes to fout, because sometimes the writer
-	# can hang and we won't get to the termination code
-	set dbg_fout [open $dbg_filename w]
-	set _cgi(input) $dbg_filename
-	catch {fconfigure $dbg_fout -translation binary -encoding binary}
+	catch {fconfigure $dbg_fout -translation binary}
     }
 
     # figure out boundary
@@ -1513,24 +1385,28 @@
     set boundary --$boundary
 
     # don't corrupt or modify uploads yet allow Tcl 7.4 to work
-    catch {fconfigure $fin -translation binary -encoding binary}
+    catch {fconfigure $fin -translation binary}
 
     # get first boundary line
     gets $fin buf
     if {[info exists dbg_fout]} {puts $dbg_fout $buf; flush $dbg_fout}
 
-    set filecount 0
+    set _cgi(file,filecount) 0
+
     while {1} {
 	# process Content-Disposition:
 	if {-1 == [gets $fin buf]} break
 	if {[info exists dbg_fout]} {puts $dbg_fout $buf; flush $dbg_fout}
 	catch {unset filename}
-	foreach b $buf {
-	    regexp {^name="(.*)"} $b dummy varname
-	}
+	regexp {name="([^"]*)"} $buf dummy varname
 	if {0==[info exists varname]} {
-	    set _cgi(client_error) 1
-	    error "In response to a request for a multipart form, your browser generated a part header without a name field.  Please upgrade (or fix) your browser."
+	    # lynx violates spec and doesn't use quotes, so try again but
+	    # assume space is delimiter
+	    regexp {name=([^ ]*)} $buf dummy varname
+	    if {0==[info exists varname]} {
+		set _cgi(client_error) 1
+		error "In response to a request for a multipart form, your browser generated a part header without a name field.  Please upgrade (or fix) your browser."
+	    }
 	}	    
 	# Lame-o encoding (on Netscape at least) doesn't escape field
 	# delimiters (like quotes)!!  Since all we've ever seen is filename=
@@ -1548,14 +1424,18 @@
 	}
 
 	if {[info exists filename]} {
+	    if {$_cgi(file,filecount) > $_cgi(file,filelimit)} {
+		error "Too many files submitted.  Max files allowed: $_cgi(file,filelimit)"
+	    }
+
 	    # read the part into a file
-	    set foutname /tmp/CGI[pid].[incr filecount]
-	    set foutname [file join $_cgi(tmpdir) CGI[pid].[incr filecount]]
+	    set foutname [file join $_cgi(tmpdir) CGI[pid].[incr _cgi(file,filecount)]]
 	    set fout [open $foutname w]
 	    # "catch" permits this to work with Tcl 7.4
-	    catch {fconfigure $fout -translation binary -encoding binary}
+	    catch {fconfigure $fout -translation binary}
 	    _cgi_set_uservar $varname [list $foutname $filename $conttype]
 	    set _cgi_userfile($varname) [list $foutname $filename $conttype]
+
 	    #
 	    # Look for a boundary line preceded by \r\n.
 	    #
@@ -1583,10 +1463,13 @@
 		    puts -nonewline $fout $leftover$buf
 		    set leftover "\n"
 		}
+ 		if {[file size $foutname] > $_cgi(file,charlimit)} {
+		    error "File size exceeded.  Max file size allowed: $_cgi(file,charlimit)"
+		}
 	    }
+
 	    close $fout
 	    unset fout
-        
 	} else {
 	    # read the part into a variable
 	    set val ""
@@ -1672,7 +1555,8 @@
 	}
     }
 
-    set filecount 0
+    set _cgi(file,filecount) 0
+
     while {1} {
 	# process Content-Disposition:
 	expect {
@@ -1684,9 +1568,7 @@
 	    eof break
 	}
 	catch {unset filename}
-	foreach b $buf {
-	    regexp {^name="(.*)"} $b dummy varname
-	}
+	regexp {name="([^"]*)"} $buf dummy varname
 	if {0==[info exists varname]} {
 	    set _cgi(client_error) 1
 	    error "In response to a request for a multipart form, your browser generated a part header without a name field.  Please upgrade (or fix) your browser."
@@ -1712,8 +1594,12 @@
 	}
 
 	if {[info exists filename]} {
+	    if {$_cgi(file,filecount) > $_cgi(file,filelimit)} {
+		error "Too many files submitted.  Max files allowed: $_cgi(file,filelimit)"
+	    }
+
 	    # read the part into a file
-	    set foutname [file join $_cgi(tmpdir) CGI[pid].[incr filecount]]
+	    set foutname [file join $_cgi(tmpdir) CGI[pid].[incr _cgi(file,filecount)]]
 	    spawn -open [open $foutname w]
 	    set fout_sid $spawn_id
 
@@ -1967,6 +1853,23 @@
     }
 }
 
+# set the urlencoding
+proc cgi_urlencoding {{encoding ""}} {
+    global _cgi 
+    
+    set result [expr {[info exists _cgi(queryencoding)]
+                      ? $_cgi(queryencoding)
+                      : ""}]
+
+    # check if the encoding is available 
+    if {[info tclversion] >= 8.1
+        && [lsearch -exact [encoding names] $encoding] != -1 } {	
+        set _cgi(queryencoding) $encoding
+    }
+
+    return $result
+}
+
 ##################################################
 # button support
 ##################################################
@@ -2088,7 +1991,7 @@
 	    cgi_put " $a"
 	}
     }
-    cgi_put "></area>"
+    cgi_put "/>"
 }
 
 ##################################################
@@ -2182,6 +2085,15 @@
     cgi_put "<input type=file name=\"$name\"[_cgi_list_to_string $args]/>"
 }
 
+# establish a per-file limit for uploads
+
+proc cgi_file_limit {files chars} {
+    global _cgi
+
+    set _cgi(file,filelimit) $files
+    set _cgi(file,charlimit) $chars
+}
+
 ##################################################
 # select support
 ##################################################
@@ -2224,7 +2136,7 @@
     }
     if {[info exists selected_if_equal]} {
 	if {0 == [string compare $selected_if_equal $value]} {
-	    cgi_put " selected=\"selected\""
+	    cgi_put " selected"
 	}
     }
     cgi_puts ">[cgi_quote_html $o]</option>"
@@ -2251,7 +2163,7 @@
 	    }
 	}
     }
-    cgi_put "></embed>"
+    cgi_put "/>"
 }
 
 ##################################################
@@ -2525,7 +2437,7 @@
 ##################################################
 
 proc cgi_stylesheet {href} {
-    puts "<link rel=stylesheet href=\"$href\" type=\"text/css\"></link>"
+    puts "<link rel=stylesheet href=\"$href\" type=\"text/css\"/>"
 }
 
 proc cgi_span {args} {
@@ -2584,7 +2496,7 @@
 	    cgi_put " $a"
 	}
     }
-    cgi_puts "></frame>"
+    cgi_puts "/>"
 }
 
 proc cgi_noframes {args} {
@@ -2672,33 +2584,50 @@
 
 # User-defined procedure to generate DOCTYPE declaration
 proc cgi_doctype {} {
-	#Zeile hinzugefügt: 22.02.2007, Badberg, ELV
-	#puts "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">"
-
-  # AG, eQ-3, 29.01.2013
-	puts "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"	\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
-
-	#quirks puts "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">"
+    # AG, eQ-3, 29.01.2013
+    puts "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">"
 }
 
 ##################################################
 # do some initialization
 ##################################################
 
-cgi_name ""
-cgi_root ""
-cgi_body_args ""
+# cgi_init initializes to a known state.
+
+proc cgi_init {} {
+    global _cgi
+    unset _cgi
+
+    # set explicitly for speed
+    set _cgi(debug) -off
+    set _cgi(buffer_nl) "\n"
 
-# email addr of person responsible for this service
-cgi_admin_mail_addr "root"	;# you should override this!
+    cgi_name ""
+    cgi_root ""
+    cgi_body_args ""
+    cgi_file_limit 10 100000000
 
-# most services won't have an actual email addr
-cgi_mail_addr "CGI script - do not reply"
+    if {[info tclversion] >= 8.1} {
+	# set initial urlencoding
+	if { [lsearch -exact [encoding names] "utf-8"] != -1} {
+	    cgi_urlencoding "utf-8"
+	} else {
+	    cgi_urlencoding [encoding system]
+	}
+    }
+
+    # email addr of person responsible for this service
+    cgi_admin_mail_addr "root"	;# you should override this!
+
+    # most services won't have an actual email addr
+    cgi_mail_addr "CGI script - do not reply"
+}
+cgi_init
 
 # deduce tmp directory
 switch $tcl_platform(platform) {
     unix {
-	set _cgi(tmpdir) /tmp
+	set _cgi(tmpdir) /usr/local/tmp
     } macintosh {
 	set _cgi(tmpdir) [pwd]
     } default {
@@ -2711,4 +2640,4 @@
 # regexp for matching attr=val
 set _cgi(attr,regexp) "^(\[^=]*)=(\[^\"].*)"
 
-package provide cgi 1.8.0
+package provide cgi 1.10.0
--- occu/WebUI/www/webui/webui.js.orig
+++ occu/WebUI/www/webui/webui.js
@@ -7365,6 +7365,7 @@
     this.currentPageOptions  = options;
     
     this.currentPage.enter(options);
+    window.name = 'ccu-main-window';
   },
   
   reload: function()
