//JSI Command Prototypes: version 3.0.4
throw("NOT EXECUTABLE: USE FILE IN GEANY EDITOR FOR CMD LINE COMPLETION + GOTO TAG");

var Array = function(cmd,args) {};
Array.prototype.concat = function(...):array {};
Array.prototype.every = function(callback:function):any {};
Array.prototype.fill = function(value:any, start:number=0, end:number=-1):array {};
Array.prototype.filter = function(callback:function, this:object=void):array {};
Array.prototype.find = function(callback:function):any {};
Array.prototype.findIndex = function(callback:function):any {};
Array.prototype.flat = function(depth:number=1):array {};
Array.prototype.forEach = function(callback:function, this:object=void):void {};
Array.prototype.includes = function(val:any):any {};
Array.prototype.indexOf = function(str:any, startIdx:number=0):number {};
Array.prototype.isArray = function():boolean {};
Array.prototype.join = function(sep:string=''):string {};
Array.prototype.lastIndexOf = function(val:any, start:number=0):number {};
Array.prototype.map = function(callback:function, this:object=void):array {};
Array.prototype.pop = function():any {};
Array.prototype.push = function(val:any, ...):number {};
Array.prototype.reduce = function(callback:function, initial:any):any {};
Array.prototype.reduceRight = function(callback:function, initial:any):any {};
Array.prototype.reverse = function():array {};
Array.prototype.shift = function():any {};
Array.prototype.sizeOf = function():number {};
Array.prototype.slice = function(start:number, end:number=void):array {};
Array.prototype.some = function(callback:function, this:object=void):boolean {};
Array.prototype.sort = function(options:function|object=void):array {};
Array.prototype.splice = function(start:number, howmany:number=void, ...):array {};
Array.prototype.unshift = function(...):number {};
var Boolean = function(cmd,args) {};
var CData = function(cmd,args) {};
CData.prototype.conf = function(options:object|string=void):any {};
CData.prototype.get = function(key:string|number|object=null, field:string=void):any {};
CData.prototype.incr = function(key:string|number|object|null, field:object|string, value:number=1):number {};
CData.prototype.info = function():object {};
CData.prototype.names = function():array {};
CData.prototype.set = function(key:string|number|object|null, field:object|string, value:any=void):any {};
CData.prototype.unset = function(key:string|number|object):any {};
var CEnum = function(cmd,args) {};
CEnum.prototype.add = function(options:object|string, fields:array|string):any {};
CEnum.prototype.conf = function(enum:string, options:object|string=void):any {};
CEnum.prototype.fieldconf = function(enum:string, field:string, options:object|string=void):any {};
CEnum.prototype.find = function(enum:string, intValue:number):string {};
CEnum.prototype.get = function(enum:string):object {};
CEnum.prototype.names = function(enum:string=void):array {};
CEnum.prototype.remove = function(enum:string):any {};
CEnum.prototype.value = function(enum:string, item:string):number {};
var CStruct = function(cmd,args) {};
CStruct.prototype.add = function(options:object|string, fields:array|string):any {};
CStruct.prototype.conf = function(struct:string, options:object|string=void):any {};
CStruct.prototype.fieldconf = function(struct:string, field:string, options:object|string=void):any {};
CStruct.prototype.get = function(struct, options:object=void):object {};
CStruct.prototype.names = function(struct:string=void):array {};
CStruct.prototype.remove = function(name:string):any {};
CStruct.prototype.schema = function():string {};
var CType = function(cmd,args) {};
CType.prototype.conf = function(typ:string, options:object|string=void):any {};
CType.prototype.names = function(ctype=false):array {};
var Channel = function(cmd,args) {};
Channel.prototype.close = function():boolean {};
Channel.prototype.eof = function():boolean {};
Channel.prototype.filename = function():string {};
Channel.prototype.flush = function():number {};
Channel.prototype.gets = function():string|void {};
Channel.prototype.lstat = function():object {};
Channel.prototype.mode = function():string {};
Channel.prototype.open = function(file:string, mode:string='r'):boolean {};
Channel.prototype.puts = function(str):boolean {};
Channel.prototype.read = function(size:number=-1):string|void {};
Channel.prototype.seek = function(pos:number, whence:string):number {};
Channel.prototype.stat = function():object {};
Channel.prototype.tell = function():number {};
Channel.prototype.truncate = function(pos:number):number {};
Channel.prototype.write = function(data):number {};
var Debugger = function(cmd,args) {};
Debugger.prototype.add = function(val:string|number, temp:boolean=false):number {};
Debugger.prototype.enable = function(id:number, on:boolean):void {};
Debugger.prototype.info = function(id:number=void):array|object {};
Debugger.prototype.remove = function(id:number):void {};
var Event = function(cmd,args) {};
Event.prototype.clearInterval = function(id:number):void {};
Event.prototype.info = function(id:number):object {};
Event.prototype.names = function():array {};
Event.prototype.setInterval = function(callback:function, millisecs:number):number {};
Event.prototype.setTimeout = function(callback:function, millisecs:number):number {};
Event.prototype.update = function(options:number|object=void):number {};
var File = function(cmd,args) {};
File.prototype.atime = function(file:string):number {};
File.prototype.chdir = function(file:string):any {};
File.prototype.chmod = function(file:string, mode:number):any {};
File.prototype.copy = function(src:string, dest:string, force:boolean=false):any {};
File.prototype.dirname = function(file:string):string {};
File.prototype.executable = function(file:string):boolean {};
File.prototype.exists = function(file:string):boolean {};
File.prototype.extension = function(file:string):string {};
File.prototype.glob = function(pattern:regexp|string|null='*', options:function|object|null=void):array {};
File.prototype.isdir = function(file:string):boolean {};
File.prototype.isfile = function(file:string):boolean {};
File.prototype.isrelative = function(file:string):boolean {};
File.prototype.join = function(path:string, path:string):string {};
File.prototype.link = function(src:string, dest:string, ishard:boolean=false):any {};
File.prototype.lstat = function(file:string):object {};
File.prototype.mkdir = function(file:string,force:boolean=false):any {};
File.prototype.mknod = function(file:string, mode:number, dev:number):any {};
File.prototype.mtime = function(file:string):number {};
File.prototype.owned = function(file:string):boolean {};
File.prototype.pwd = function():string {};
File.prototype.read = function(file:string, mode:string='rb'):string {};
File.prototype.readable = function(file:string):boolean {};
File.prototype.readlink = function(file:string):string {};
File.prototype.realpath = function(file:string):string {};
File.prototype.remove = function(file:string, force:boolean=false):any {};
File.prototype.rename = function(src:string, dest:string, force:boolean=false):any {};
File.prototype.rootname = function(file:string):string {};
File.prototype.size = function(file:string):number {};
File.prototype.stat = function(file:string):object {};
File.prototype.tail = function(file:string):string {};
File.prototype.tempfile = function(file:string):any {};
File.prototype.truncate = function(file:string, size:number):any {};
File.prototype.type = function(file:string):string {};
File.prototype.writable = function(file:string):boolean {};
File.prototype.write = function(file:string, str:string, mode:string='wb+'):number {};
var Function = function(cmd,args) {};
Function.prototype.apply = function(thisArg:null|object|function, args:array=void):any {};
Function.prototype.bind = function(thisArg:object|function=null,arg,...):any {};
Function.prototype.call = function(thisArg:null|object|function, arg1, ...):any {};
var Info = function(cmd,args) {};
Info.prototype.argv0 = function():string|void {};
Info.prototype.cmds = function(val:string|regexp='*', options:object=void):array|object {};
Info.prototype.completions = function(str:string, start:number=0, end:number=void):array {};
Info.prototype.data = function(val:string|regexp|object=void):array|object {};
Info.prototype.error = function():object {};
Info.prototype.event = function(id:number=void):array|object {};
Info.prototype.execZip = function():string|void {};
Info.prototype.executable = function():string {};
Info.prototype.files = function():array {};
Info.prototype.funcs = function(string|regexp|object=void):array|object {};
Info.prototype.interp = function(interp:userobj=void):object {};
Info.prototype.isMain = function():boolean {};
Info.prototype.keywords = function(isSql=false, name:string=void):boolean|array {};
Info.prototype.level = function(level:number=void):number|array|object {};
Info.prototype.locals = function(varsOnly:boolean=void):object {};
Info.prototype.lookup = function(name:string):any {};
Info.prototype.methods = function(val:string|regexp):array|object {};
Info.prototype.named = function(name:string=void):array|userobj {};
Info.prototype.options = function(ctype:boolean=false):array {};
Info.prototype.package = function(pkgName:string):object|null {};
Info.prototype.platform = function():object {};
Info.prototype.script = function(func:function|regexp=void):string|array|void {};
Info.prototype.scriptDir = function():string|void {};
Info.prototype.vars = function(val:string|regexp|object=void):array|object {};
Info.prototype.version = function(full:boolean=false):number|object {};
var Interp = function(cmd,args) {};
Interp.prototype.alias = function(name:string=void, func:function|null=void, args:array|null=void, async=false):any {};
Interp.prototype.call = function(funcName:string, args:array, wait:boolean=false):any {};
Interp.prototype.conf = function(options:string|object=void):any {};
Interp.prototype.eval = function(js:string, async:boolean=false):any {};
Interp.prototype.info = function():object {};
Interp.prototype.source = function(file:string, async:boolean=false):any {};
Interp.prototype.uplevel = function(js:string, level:number=0):any {};
Interp.prototype.value = function(var:string, level:number=0):any {};
var JSON = function(cmd,args) {};
JSON.prototype.check = function(str:string, strict:boolean=true):boolean {};
JSON.prototype.parse = function(str:string, strict:boolean=true):any {};
JSON.prototype.stringify = function(value:any,  strict:boolean=true):string {};
var Math = function(cmd,args) {};
Math.prototype.abs = function(num:number):number {};
Math.prototype.acos = function(num:number):number {};
Math.prototype.asin = function(num:number):number {};
Math.prototype.atan = function(num:number):number {};
Math.prototype.atan2 = function(x:number, y:number):number {};
Math.prototype.ceil = function(num:number):number {};
Math.prototype.cos = function(num:number):number {};
Math.prototype.exp = function(num:number):number {};
Math.prototype.floor = function(num:number):number {};
Math.prototype.log = function(num:number):number {};
Math.prototype.max = function(x:number, y:number, ...):number {};
Math.prototype.min = function(x:number, y:number, ...):number {};
Math.prototype.pow = function(x:number, y:number):number {};
Math.prototype.random = function():number {};
Math.prototype.round = function(num:number):number {};
Math.prototype.sin = function(num:number):number {};
Math.prototype.sqrt = function(num:number):number {};
Math.prototype.srand = function(seed:number):number {};
Math.prototype.tan = function(num:number):number {};
var MySql = function(cmd,args) {};
MySql.prototype.affectedRows = function():number {};
MySql.prototype.complete = function(sql:string):boolean {};
MySql.prototype.conf = function(options:string|object=void):any {};
MySql.prototype.errorNo = function():number {};
MySql.prototype.errorState = function():string {};
MySql.prototype.eval = function(sql:string):number {};
MySql.prototype.exists = function(sql:string):boolean {};
MySql.prototype.info = function():object {};
MySql.prototype.lastQuery = function():string {};
MySql.prototype.lastRowid = function():number {};
MySql.prototype.onecolumn = function(sql:string):any {};
MySql.prototype.ping = function(noError:boolean=false):number {};
MySql.prototype.query = function(sql:string, options:function|string|array|object=void):any {};
MySql.prototype.reconnect = function():void {};
MySql.prototype.reset = function():number {};
var Number = function(cmd,args) {};
Number.prototype.isFinite = function():boolean {};
Number.prototype.isInteger = function():boolean {};
Number.prototype.isNaN = function():boolean {};
Number.prototype.isSafeInteger = function():boolean {};
Number.prototype.toExponential = function(num:number):string {};
Number.prototype.toFixed = function(num:number=0):string {};
Number.prototype.toPrecision = function(num:number):string {};
Number.prototype.toString = function(radix:number=10):string {};
var Object = function(cmd,args) {};
Object.prototype.create = function(proto:null|object, properties:object=void):object {};
Object.prototype.getPrototypeOf = function(name:object|function):function|object {};
Object.prototype.hasOwnProperty = function(name:string):boolean {};
Object.prototype.is = function(value1, value2):boolean {};
Object.prototype.isPrototypeOf = function(name):boolean {};
Object.prototype.keys = function(obj:object|function=void):array {};
Object.prototype.merge = function(obj:object|function):object {};
Object.prototype.propertyIsEnumerable = function(name):boolean {};
Object.prototype.setPrototypeOf = function(name:object, value:object):any {};
Object.prototype.toLocaleString = function(quote:boolean=false):string {};
Object.prototype.toString = function(quote:boolean=false):string {};
Object.prototype.valueOf = function():any {};
var RegExp = function(cmd,args) {};
RegExp.prototype.exec = function(val:string):array|object|null {};
RegExp.prototype.test = function(val:string):boolean {};
var Signal = function(cmd,args) {};
Signal.prototype.alarm = function(secs):number {};
Signal.prototype.callback = function(func:function, sig:number|string):number {};
Signal.prototype.handle = function(sig:number|string=void, ...):any {};
Signal.prototype.ignore = function(sig:number|string=void, ...):any {};
Signal.prototype.kill = function(pid:number, sig:number|string='SIGTERM'):void {};
Signal.prototype.names = function():array {};
Signal.prototype.reset = function(sig:number|string=void, ...):array {};
var Socket = function(cmd,args) {};
Socket.prototype.close = function():void {};
Socket.prototype.conf = function(options:string|object=void):any {};
Socket.prototype.idconf = function(id:number=void, options:string|object=void):any {};
Socket.prototype.names = function():array {};
Socket.prototype.recv = function(id:number=void):string {};
Socket.prototype.send = function(id:number, data:string, options:object=void):void {};
Socket.prototype.update = function():void {};
var Sqlite = function(cmd,args) {};
Sqlite.prototype.backup = function(file:string, dbname:string='main'):void {};
Sqlite.prototype.collate = function(name:string, callback:function):void {};
Sqlite.prototype.complete = function(sql:string):boolean {};
Sqlite.prototype.conf = function(options:string|object=void):any {};
Sqlite.prototype.eval = function(sql:string):number {};
Sqlite.prototype.exists = function(sql:string):boolean {};
Sqlite.prototype.filename = function(name:string='main'):string {};
Sqlite.prototype.func = function(name:string, callback:function, numArgs:number=void):void {};
Sqlite.prototype.import = function(table:string, file:string, options:object=void):number {};
Sqlite.prototype.interrupt = function():void {};
Sqlite.prototype.onecolumn = function(sql:string):any {};
Sqlite.prototype.query = function(sql:string, options:function|string|array|object=void):any {};
Sqlite.prototype.restore = function(file:string, dbname:string):void {};
Sqlite.prototype.transaction = function(callback:function, type:string=void):void {};
var String = function(cmd,args) {};
String.prototype.charAt = function(index:number):string {};
String.prototype.charCodeAt = function(index:number):number {};
String.prototype.concat = function(str:string, ...):string {};
String.prototype.fromCharCode = function(...):string {};
String.prototype.indexOf = function(str:string, start:number):number {};
String.prototype.lastIndexOf = function(str:string, start:number):number {};
String.prototype.map = function(strMap:array, nocase:boolean=false):string {};
String.prototype.match = function(pattern:regexp|string):array|null {};
String.prototype.repeat = function(count:number):string {};
String.prototype.replace = function(pattern:regexp|string, replace:string|function):string {};
String.prototype.search = function(pattern:regexp|string):number {};
String.prototype.slice = function(start:number, end:number):string {};
String.prototype.split = function(char:string|null=void):array {};
String.prototype.substr = function(start:number, length:number):string {};
String.prototype.substring = function(start:number, end:number):string {};
String.prototype.toLocaleLowerCase = function():string {};
String.prototype.toLocaleUpperCase = function():string {};
String.prototype.toLowerCase = function():string {};
String.prototype.toTitle = function(chars:string):string {};
String.prototype.toUpperCase = function():string {};
String.prototype.trim = function(chars:string):string {};
String.prototype.trimLeft = function(chars:string):string {};
String.prototype.trimRight = function(chars:string):string {};
var System = function(cmd,args) {};
System.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};
System.prototype.clearInterval = function(id:number):void {};
System.prototype.decodeURI = function(val:string):string {};
System.prototype.encodeURI = function(val:string):string {};
System.prototype.exec = function(val:string, options:string|object=void):any {};
System.prototype.exit = function(code:number=0):void {};
System.prototype.format = function(format:string, ...):string {};
System.prototype.isFinite = function(val):boolean {};
System.prototype.isMain = function():boolean {};
System.prototype.isNaN = function(val):boolean {};
System.prototype.load = function(shlib:string):void {};
System.prototype.log = function(val, ...):void {};
System.prototype.matchObj = function(obj:object, match:string=void, partial=false, noerror=false):string|boolean {};
System.prototype.noOp = function():any {};
System.prototype.parseFloat = function(val):number {};
System.prototype.parseInt = function(val:any, base:number=10):number {};
System.prototype.parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):any {};
System.prototype.printf = function(format:string, ...):void {};
System.prototype.provide = function(name:string|function=void, version:number|string=1.0, opts:object|function=void):void {};
System.prototype.puts = function(val, ...):void {};
System.prototype.quote = function(val:string):string {};
System.prototype.require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};
System.prototype.runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};
System.prototype.setInterval = function(callback:function, ms:number):number {};
System.prototype.setTimeout = function(callback:function, ms:number):number {};
System.prototype.sleep = function(secs:number=1.0):void {};
System.prototype.source = function(val:string|array, options:object=void):any {};
System.prototype.strftime = function(num:number=null, options:string|object=void):string {};
System.prototype.strptime = function(val:string=void, options:string|object=void):number {};
System.prototype.times = function(callback:function|boolean, count:number=1):number {};
System.prototype.unload = function(shlib:string):void {};
System.prototype.update = function(options:number|object=void):number {};
var Util = function(cmd,args) {};
Util.prototype.argArray = function(arg:any|undefined):array|null {};
Util.prototype.base64 = function(val:string, decode:boolean=false):string {};
Util.prototype.complete = function(val:string):boolean {};
Util.prototype.crc32 = function(val:string, crcSeed=0):number {};
Util.prototype.decrypt = function(val:string, key:string):string {};
Util.prototype.encrypt = function(val:string, key:string):string {};
Util.prototype.fromCharCode = function(code:number):string {};
Util.prototype.getenv = function(name:string=void):string|object|void {};
Util.prototype.getpid = function(parent:boolean=false):number {};
Util.prototype.getuser = function():object {};
Util.prototype.hash = function(val:string, options|object=void):string {};
Util.prototype.hexStr = function(val:string, decode:boolean=false):string {};
Util.prototype.setenv = function(name:string, value:string=void):any {};
Util.prototype.sqlValues = function(name:string, var:object=void):any {};
Util.prototype.times = function(callback:function|boolean, count:number=1):number {};
Util.prototype.verConvert = function(ver:string|number, zeroTrim:number=0):number|string|null {};
var Vfs = function(cmd,args) {};
Vfs.prototype.conf = function(mount:string, string|options:object|string=void):any {};
Vfs.prototype.exec = function(cmd:string):any {};
Vfs.prototype.fileconf = function(mount:string, path:string, options:string|object=void):any {};
Vfs.prototype.list = function():array {};
Vfs.prototype.mount = function(type:string, file:string, param:object=void):string {};
Vfs.prototype.type = function(type:string=void, options:object|null=void):any {};
Vfs.prototype.unmount = function(mount:string):void {};
Vfs.prototype.vmount = function(options:object=void):string {};
var WebSocket = function(cmd,args) {};
WebSocket.prototype.conf = function(options:string|object=void):any {};
WebSocket.prototype.file = function(name:string=void):array|void {};
WebSocket.prototype.handler = function(extension:string=void, cmd:string|function=void, flags:number=0):string|array|function|void {};
WebSocket.prototype.header = function(id:number, name:string=void):string|array|void {};
WebSocket.prototype.idconf = function(id:number, options:string|object=void):any {};
WebSocket.prototype.ids = function(name:string=void):array {};
WebSocket.prototype.query = function(id:number, name:string=void):string|object|void {};
WebSocket.prototype.send = function(id:number, data:any):void {};
WebSocket.prototype.status = function():object|void {};
WebSocket.prototype.unalias = function(path:string):string|void {};
WebSocket.prototype.update = function():void {};
WebSocket.prototype.version = function():string {};
var Zvfs = function(cmd,args) {};
Zvfs.prototype.append = function(archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...):void {};
Zvfs.prototype.create = function(archive:string, filelist:array, path:string|null=void, filelist:array=void, path:string|null=void, ...):void {};
Zvfs.prototype.deflate = function(data:string):string {};
Zvfs.prototype.inflate = function(data:string):string {};
Zvfs.prototype.list = function(archive:string):array {};
Zvfs.prototype.mount = function(archive:string, mountdir:string=void):string {};
Zvfs.prototype.names = function(mountdir:string=void):array {};
Zvfs.prototype.offset = function(archive:string):number {};
Zvfs.prototype.stat = function(filename:string):object {};
Zvfs.prototype.truncate = function(archive:string, noerror:boolean=false):number {};
Zvfs.prototype.unmount = function(archive:string):void {};
var assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};
var clearInterval = function(id:number):void {};
var console = function(cmd,args) {};
console.prototype.assert = function(expr:boolean|number|function, msg:string=void, options:object=void):void {};
console.prototype.error = function(val, ...):void {};
console.prototype.input = function():string|void {};
console.prototype.log = function(val, ...):void {};
console.prototype.printf = function(format:string, ...):void {};
console.prototype.puts = function(val, ...):void {};
console.prototype.warn = function(val, ...):void {};
var decodeURI = function(val:string):string {};
var encodeURI = function(val:string):string {};
var exec = function(val:string, options:string|object=void):any {};
var exit = function(code:number=0):void {};
var format = function(format:string, ...):string {};
var isFinite = function(val):boolean {};
var isMain = function():boolean {};
var isNaN = function(val):boolean {};
var load = function(shlib:string):void {};
var log = function(val, ...):void {};
var matchObj = function(obj:object, match:string=void, partial=false, noerror=false):string|boolean {};
var noOp = function():any {};
var parseFloat = function(val):number {};
var parseInt = function(val:any, base:number=10):number {};
var parseOpts = function(self:object|userobj, options:object, conf:object|null|undefined):any {};
var printf = function(format:string, ...):void {};
var provide = function(name:string|function=void, version:number|string=1.0, opts:object|function=void):void {};
var puts = function(val, ...):void {};
var quote = function(val:string):string {};
var require = function(name:string=void, version:number|string=1, options:object=void):number|array|object {};
var runModule = function(cmd:string|null|function=void, conf:array=undefined):any {};
var setInterval = function(callback:function, ms:number):number {};
var setTimeout = function(callback:function, ms:number):number {};
var sleep = function(secs:number=1.0):void {};
var source = function(val:string|array, options:object=void):any {};
var strftime = function(num:number=null, options:string|object=void):string {};
var strptime = function(val:string=void, options:string|object=void):number {};
var times = function(callback:function|boolean, count:number=1):number {};
var unload = function(shlib:string):void {};
var update = function(options:number|object=void):number {};

