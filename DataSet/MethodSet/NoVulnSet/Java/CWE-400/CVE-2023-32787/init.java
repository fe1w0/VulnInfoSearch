public class OpcTcpServerConnection extends AbstractServerConnection {
			public void init() {
				s.getStateMonitor().addStateListener(socketListener);
				
			    // must set timeout timer here, because it might be canceled before the below monitor
			    // is triggered
				if(rh == null) {
					timeoutTimer = TimerUtil.schedule(
							timer, timeout,
							StackUtils.getBlockingWorkExecutor(),
							System.currentTimeMillis() + handshakeTimeout);
				}

			    // Start listening for the Hello (the inputListener will schedule itself again)
				s.getInputStream().createMonitor(8, inputListener);

				if(rh != null) {
					s.getStateMonitor().addStateListener(new StateListener<SocketState>() {
						@Override
						public void onStateTransition(
								IStatefulObject<SocketState, ?> sender,
								SocketState oldState, SocketState newState) {
							if(oldState == SocketState.Connecting && newState == SocketState.Connected) {
								timeoutTimer = TimerUtil.schedule(
										timer, timeout,
										StackUtils.getBlockingWorkExecutor(),
										System.currentTimeMillis() + handshakeTimeout);
								sendReverseHello(rh);
							}							
						}
					});
				}	
			  }			
}