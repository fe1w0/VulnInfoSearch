public class XStream {
public ObjectInputStream createObjectInputStream(final HierarchicalStreamReader reader, DataHolder dataHolder)
        throws IOException {
    if (collectionUpdateLimit >= 0) {
        if (dataHolder == null) {
            dataHolder = new MapBackedDataHolder();
        }
        dataHolder.put(COLLECTION_UPDATE_LIMIT, new Integer(collectionUpdateLimit));
        dataHolder.put(COLLECTION_UPDATE_SECONDS, new Integer(0));
    }
    final DataHolder dh = dataHolder;
    return new CustomObjectInputStream(new CustomObjectInputStream.StreamCallback() {
        public Object readFromStream() throws EOFException {
            if (!reader.hasMoreChildren()) {
                throw new EOFException();
            }
            reader.moveDown();
            final Object result = unmarshal(reader, null, dh);
            reader.moveUp();
            return result;
        }

        public Map readFieldsFromStream() throws IOException {
            throw new NotActiveException("not in call to readObject");
        }

        public void defaultReadObject() throws NotActiveException {
            throw new NotActiveException("not in call to readObject");
        }

        public void registerValidation(ObjectInputValidation validation, int priority) throws NotActiveException {
            throw new NotActiveException("stream inactive");
        }

        public void close() {
            reader.close();
        }
    }, classLoaderReference);
}
}