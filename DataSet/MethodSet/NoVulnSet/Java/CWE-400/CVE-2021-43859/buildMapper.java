public class XStream {
    public int collectionUpdateLimit = 20;
    public ReflectionProvider reflectionProvider;
    public HierarchicalStreamDriver hierarchicalStreamDriver;
    public ClassLoaderReference classLoaderReference;
    public MarshallingStrategy marshallingStrategy;
    public ConverterLookup converterLookup;
    public ConverterRegistry converterRegistry;
    public Mapper mapper;
    public PackageAliasingMapper packageAliasingMapper;
    public ClassAliasingMapper classAliasingMapper;
    public FieldAliasingMapper fieldAliasingMapper;
    public ElementIgnoringMapper elementIgnoringMapper;
    public AttributeAliasingMapper attributeAliasingMapper;
    public SystemAttributeAliasingMapper systemAttributeAliasingMapper;
    public AttributeMapper attributeMapper;
    public DefaultImplementationsMapper defaultImplementationsMapper;
    public ImmutableTypesMapper immutableTypesMapper;
    public ImplicitCollectionMapper implicitCollectionMapper;
    public LocalConversionMapper localConversionMapper;
    public SecurityMapper securityMapper;
    public AnnotationConfiguration annotationConfiguration;
    public static final int NO_REFERENCES = 1001;
    public static final int ID_REFERENCES = 1002;
    public static final int XPATH_RELATIVE_REFERENCES = 1003;
    public static final int XPATH_ABSOLUTE_REFERENCES = 1004;
    public static final int SINGLE_NODE_XPATH_RELATIVE_REFERENCES = 1005;
    public static final int SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES = 1006;
    public static final int PRIORITY_VERY_HIGH = 10000;
    public static final int PRIORITY_NORMAL = 0;
    public static final int PRIORITY_LOW = -10;
    public static final int PRIORITY_VERY_LOW = -20;
    public static final String COLLECTION_UPDATE_LIMIT = "XStreamCollectionUpdateLimit";
    public static final String COLLECTION_UPDATE_SECONDS = "XStreamCollectionUpdateSeconds";
    public static final String ANNOTATION_MAPPER_TYPE = "com.thoughtworks.xstream.mapper.AnnotationMapper";
    public static final Pattern IGNORE_ALL = Pattern.compile(".*");
    public Mapper buildMapper() {
        Mapper mapper = new DefaultMapper(classLoaderReference);
        if (useXStream11XmlFriendlyMapper()) {
            mapper = new XStream11XmlFriendlyMapper(mapper);
        }
        mapper = new DynamicProxyMapper(mapper);
        mapper = new PackageAliasingMapper(mapper);
        mapper = new ClassAliasingMapper(mapper);
        mapper = new ElementIgnoringMapper(mapper);
        mapper = new FieldAliasingMapper(mapper);
        mapper = new AttributeAliasingMapper(mapper);
        mapper = new SystemAttributeAliasingMapper(mapper);
        mapper = new ImplicitCollectionMapper(mapper, reflectionProvider);
        mapper = new OuterClassMapper(mapper);
        mapper = new ArrayMapper(mapper);
        mapper = new DefaultImplementationsMapper(mapper);
        mapper = new AttributeMapper(mapper, converterLookup, reflectionProvider);
        if (JVM.isVersion(5)) {
            mapper = buildMapperDynamically("com.thoughtworks.xstream.mapper.EnumMapper", new Class[]{Mapper.class},
                new Object[]{mapper});
        }
        mapper = new LocalConversionMapper(mapper);
        mapper = new ImmutableTypesMapper(mapper);
        if (JVM.isVersion(8)) {
            mapper = buildMapperDynamically("com.thoughtworks.xstream.mapper.LambdaMapper", new Class[]{Mapper.class},
                new Object[]{mapper});
        }
        mapper = new SecurityMapper(mapper);
        if (JVM.isVersion(5)) {
            mapper = buildMapperDynamically(ANNOTATION_MAPPER_TYPE, new Class[]{
                Mapper.class, ConverterRegistry.class, ConverterLookup.class, ClassLoaderReference.class,
                ReflectionProvider.class}, new Object[]{
                    mapper, converterRegistry, converterLookup, classLoaderReference, reflectionProvider});
        }
        mapper = wrapMapper((MapperWrapper)mapper);
        mapper = new CachingMapper(mapper);
        return mapper;
    }
}