class RoutingInBoundHandler extends SimpleChannelInboundHandler<io.micronaut.http.HttpRequest<?>> {
    public static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);
    public static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
    public static final Argument ARGUMENT_PART_DATA = Argument.of(PartData.class);
    public final Router router;
    public final ExecutorSelector executorSelector;
    public final StaticResourceResolver staticResourceResolver;
    public final ExecutorService ioExecutor;
    public final BeanLocator beanLocator;
    public final NettyHttpServerConfiguration serverConfiguration;
    public final RequestArgumentSatisfier requestArgumentSatisfier;
    public final MediaTypeCodecRegistry mediaTypeCodecRegistry;
    public final NettyCustomizableResponseTypeHandlerRegistry customizableResponseTypeHandlerRegistry;
    public void writeDefaultErrorResponse(ChannelHandlerContext ctx, NettyHttpRequest nettyHttpRequest, Throwable cause) {
        logException(cause);

        MutableHttpResponse<?> error = io.micronaut.http.HttpResponse.serverError()
                .body(new JsonError("Internal Server Error: " + cause.getMessage()));
        subscribeToResponsePublisher(
                ctx,
                MediaType.APPLICATION_JSON_TYPE,
                new AtomicReference<>(nettyHttpRequest),
                Flowable.just(error)
        );
    }
}