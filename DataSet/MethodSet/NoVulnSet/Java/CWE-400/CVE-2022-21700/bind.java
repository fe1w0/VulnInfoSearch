public class PublisherBodyBinder extends DefaultBodyAnnotationBinder<Publisher> implements NonBlockingBodyArgumentBinder<Publisher> {
    private static final Logger LOG = LoggerFactory.getLogger(NettyHttpServer.class);
    private static final Argument<Publisher> TYPE = Argument.of(Publisher.class);
    private final BeanLocator beanLocator;
    private final HttpServerConfiguration httpServerConfiguration;
    public BindingResult<Publisher> bind(ArgumentConversionContext<Publisher> context, HttpRequest<?> source) {
        if (source instanceof NettyHttpRequest) {
            NettyHttpRequest nettyHttpRequest = (NettyHttpRequest) source;
            io.netty.handler.codec.http.HttpRequest nativeRequest = nettyHttpRequest.getNativeRequest();
            if (nativeRequest instanceof StreamedHttpRequest) {
                Optional<MediaType> contentType = source.getContentType();
                Argument<?> targetType = context.getFirstTypeVariable().orElse(Argument.OBJECT_ARGUMENT);
                HttpContentProcessor<?> processor = contentType
                    .flatMap(type -> beanLocator.findBean(HttpContentSubscriberFactory.class, new ConsumesMediaTypeQualifier<>(type)))
                    .map(factory -> factory.build(nettyHttpRequest))
                    .orElse(new DefaultHttpContentProcessor(nettyHttpRequest, httpServerConfiguration));

                //noinspection unchecked
                return () -> Optional.of(subscriber -> processor.subscribe(new TypedSubscriber<Object>((Argument) context.getArgument()) {

                    Subscription s;

                    @Override
                    protected void doOnSubscribe(Subscription subscription) {
                        this.s = subscription;
                        subscriber.onSubscribe(subscription);
                    }

                    @Override
                    protected void doOnNext(Object message) {
                        if (LOG.isTraceEnabled()) {
                            LOG.trace("Server received streaming message for argument [{}]: {}", context.getArgument(), message);
                        }
                        ArgumentConversionContext<?> conversionContext = context.with(targetType);
                        if (message instanceof ByteBufHolder) {
                            message = ((ByteBufHolder) message).content();
                            if (message instanceof EmptyByteBuf) {
                                return;
                            }
                        }

                        Optional<?> converted = conversionService.convert(message, conversionContext);

                        if (converted.isPresent()) {
                            subscriber.onNext(converted.get());
                        } else {

                            try {
                                Optional<ConversionError> lastError = conversionContext.getLastError();
                                if (lastError.isPresent()) {
                                    if (LOG.isDebugEnabled()) {
                                        LOG.debug("Cannot convert message for argument [" + context.getArgument() + "] and value: " + message, lastError.get());
                                    }
                                    subscriber.onError(new ConversionErrorException(context.getArgument(), lastError.get()));
                                } else {
                                    if (LOG.isDebugEnabled()) {
                                        LOG.debug("Cannot convert message for argument [{}] and value: {}", context.getArgument(), message);
                                    }
                                    subscriber.onError(new UnsatisfiedRouteException(context.getArgument()));
                                }
                            } finally {
                                s.cancel();
                            }
                        }

                        if (message instanceof ReferenceCounted) {
                            ((ReferenceCounted) message).release();
                        }
                    }

                    @Override
                    protected void doOnError(Throwable t) {
                        if (LOG.isTraceEnabled()) {
                            LOG.trace("Server received error for argument [" + context.getArgument() + "]: " + t.getMessage(), t);
                        }
                        try {
                            subscriber.onError(t);
                        } finally {
                            s.cancel();
                        }
                    }

                    @Override
                    protected void doOnComplete() {
                        if (LOG.isTraceEnabled()) {
                            LOG.trace("Done receiving messages for argument: {}", context.getArgument());
                        }
                        subscriber.onComplete();
                    }

                }));
            }
        }
        return BindingResult.EMPTY;
    }
}