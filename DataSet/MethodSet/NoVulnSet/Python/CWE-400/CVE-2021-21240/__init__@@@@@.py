def __init__(self, credentials, host, request_uri, headers, response, content, http):
    Authentication.__init__(self, credentials, host, request_uri, headers, response, content, http)
    challenge = auth._parse_www_authenticate(response, 'www-authenticate')
    self.challenge = challenge['hmacdigest']
    self.challenge['reason'] = self.challenge.get('reason', 'unauthorized')
    if self.challenge['reason'] not in ['unauthorized', 'integrity']:
        self.challenge['reason'] = 'unauthorized'
    self.challenge['salt'] = self.challenge.get('salt', '')
    if not self.challenge.get('snonce'):
        raise UnimplementedHmacDigestAuthOptionError(_("The challenge doesn't contain a server nonce, or this one is empty."))
    self.challenge['algorithm'] = self.challenge.get('algorithm', 'HMAC-SHA-1')
    if self.challenge['algorithm'] not in ['HMAC-SHA-1', 'HMAC-MD5']:
        raise UnimplementedHmacDigestAuthOptionError(_('Unsupported value for algorithm: %s.' % self.challenge['algorithm']))
    self.challenge['pw-algorithm'] = self.challenge.get('pw-algorithm', 'SHA-1')
    if self.challenge['pw-algorithm'] not in ['SHA-1', 'MD5']:
        raise UnimplementedHmacDigestAuthOptionError(_('Unsupported value for pw-algorithm: %s.' % self.challenge['pw-algorithm']))
    if self.challenge['algorithm'] == 'HMAC-MD5':
        self.hashmod = _md5
    else:
        self.hashmod = _sha
    if self.challenge['pw-algorithm'] == 'MD5':
        self.pwhashmod = _md5
    else:
        self.pwhashmod = _sha
    self.key = ''.join([self.credentials[0], ':', self.pwhashmod.new(''.join([self.credentials[1], self.challenge['salt']])).hexdigest().lower(), ':', self.challenge['realm']])
    self.key = self.pwhashmod.new(self.key).hexdigest().lower()