def test_update(self) -> None:
    self.login('iago')
    data = {'pattern': '#(?P<id>[123])', 'url_format_string': 'https://realm.com/my_realm_filter/%(id)s'}
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    linkifier_id = result.json()['id']
    data = {'pattern': '#(?P<id>[0-9]+)', 'url_format_string': 'https://realm.com/my_realm_filter/issues/%(id)s'}
    result = self.client_patch(f'/json/realm/filters/{linkifier_id}', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], '#1234'))
    result = self.client_get('/json/realm/linkifiers')
    self.assert_json_success(result)
    linkifier = result.json()['linkifiers']
    self.assertEqual(len(linkifier), 1)
    self.assertEqual(linkifier[0]['pattern'], '#(?P<id>[0-9]+)')
    self.assertEqual(linkifier[0]['url_format'], 'https://realm.com/my_realm_filter/issues/%(id)s')
    data = {'pattern': 'ZUL-(?P<id>\\d????)', 'url_format_string': 'https://realm.com/my_realm_filter/%(id)s'}
    result = self.client_patch(f'/json/realm/filters/{linkifier_id}', info=data)
    self.assert_json_error(result, 'Bad regular expression: bad repetition operator: ????')
    data['pattern'] = 'ZUL-(?P<id>\\d+)'
    data['url_format_string'] = '$fgfg'
    result = self.client_patch(f'/json/realm/filters/{linkifier_id}', info=data)
    self.assert_json_error(result, 'Enter a valid URL.')
    data['pattern'] = '#(?P<id>[123])'
    data['url_format_string'] = 'https://realm.com/my_realm_filter/%(id)s'
    result = self.client_patch(f'/json/realm/filters/{linkifier_id + 1}', info=data)
    self.assert_json_error(result, 'Linkifier not found.')