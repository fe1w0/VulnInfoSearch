def test_create(self) -> None:
    self.login('iago')
    data = {'pattern': '', 'url_format_string': 'https://realm.com/my_realm_filter/%(id)s'}
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_error(result, 'This field cannot be blank.')
    data['pattern'] = '(foo'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_error(result, 'Bad regular expression: missing ): (foo')
    data['pattern'] = 'ZUL-(?P<id>\\d????)'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_error(result, 'Bad regular expression: bad repetition operator: ????')
    data['pattern'] = 'ZUL-(?P<id>\\d+)'
    data['url_format_string'] = '$fgfg'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_error(result, 'Enter a valid URL.')
    data['pattern'] = 'ZUL-(?P<id>\\d+)'
    data['url_format_string'] = 'https://realm.com/my_realm_filter/'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_error(result, 'Invalid URL format string.')
    data['url_format_string'] = 'https://realm.com/my_realm_filter/#hashtag/%(id)s'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], 'ZUL-15'))
    data['pattern'] = 'ZUL2-(?P<id>\\d+)'
    data['url_format_string'] = 'https://realm.com/my_realm_filter/?value=%(id)s'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], 'ZUL2-15'))
    data['pattern'] = '_code=(?P<id>[0-9a-zA-Z]+)'
    data['url_format_string'] = 'https://example.com/product/%(id)s/details'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], '_code=123abcdZ'))
    data['pattern'] = 'PR (?P<id>[0-9]+)'
    data['url_format_string'] = 'https://example.com/~user/web#view_type=type&model=model&action=12345&id=%(id)s'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], 'PR 123'))
    data['pattern'] = 'lp/(?P<id>[0-9]+)'
    data['url_format_string'] = 'https://realm.com/my_realm_filter/?value=%(id)s&sort=reverse'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], 'lp/123'))
    data['pattern'] = 'lp:(?P<id>[0-9]+)'
    data['url_format_string'] = 'https://realm.com/my_realm_filter/?sort=reverse&value=%(id)s'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], 'lp:123'))
    data['pattern'] = '!(?P<id>[0-9]+)'
    data['url_format_string'] = 'https://realm.com/index.pl?Action=AgentTicketZoom;TicketNumber=%(id)s'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], '!123'))
    data['pattern'] = '(?P<org>[a-zA-Z0-9_-]+)/(?P<repo>[a-zA-Z0-9_-]+)#(?P<id>[0-9]+)'
    data['url_format_string'] = 'https://github.com/%(org)s/%(repo)s/issue/%(id)s'
    result = self.client_post('/json/realm/filters', info=data)
    self.assert_json_success(result)
    self.assertIsNotNone(re.match(data['pattern'], 'zulip/zulip#123'))