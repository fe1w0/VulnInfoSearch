'Constructs a constant RaggedTensor or RaggedTensorValue.\n\n  Args:\n    ragged_factory: A factory function with the signature:\n      `ragged_factory(values, row_splits)`\n    inner_factory: A factory function with the signature: `inner_factory(pylist,\n      dtype, shape, name)`\n    pylist: A nested `list`, `tuple` or `np.ndarray`.\n    dtype: Data type for returned value.\n    ragged_rank: Ragged rank for returned value.\n    inner_shape: Inner value shape for returned value.\n\n  Returns:\n    A value returned by `ragged_factory` or `inner_factory`.\n\n  Raises:\n    ValueError: If the scalar values in `pylist` have inconsistent nesting\n      depth; or if ragged_rank or inner_shape are incompatible with `pylist`.\n  '
if ragged_tensor.is_ragged(pylist):
    raise TypeError('pylist may not be a RaggedTensor or RaggedTensorValue.')
if not isinstance(pylist, (list, tuple)) and np.ndim(pylist) == 0:
    if ragged_rank is not None and ragged_rank != 0:
        raise ValueError('Invalid pylist=%r: incompatible with ragged_rank=%d' % (pylist, ragged_rank))
    if inner_shape is not None and inner_shape:
        raise ValueError('Invalid pylist=%r: incompatible with dim(inner_shape)=%d' % (pylist, len(inner_shape)))
    return inner_factory(pylist, dtype, ())
if ragged_rank is not None and ragged_rank < 0:
    raise ValueError('Invalid ragged_rank=%r: must be nonnegative' % ragged_rank)
(scalar_depth, max_depth) = _find_scalar_and_max_depth(pylist)
if scalar_depth is not None:
    if max_depth > scalar_depth:
        raise ValueError('Invalid pylist=%r: empty list nesting is greater than scalar value nesting' % pylist)
    if ragged_rank is not None and max_depth < ragged_rank:
        raise ValueError(f'Invalid pylist={pylist}, max depth smaller than ragged_rank={ragged_rank}')
if inner_shape is not None and ragged_rank is not None:
    expected_depth = ragged_rank + len(inner_shape) + 1
    if scalar_depth is not None and expected_depth != scalar_depth or (scalar_depth is None and expected_depth < max_depth):
        raise ValueError('Invalid pylist=%r: incompatible with ragged_rank=%d and dim(inner_shape)=%d' % (pylist, ragged_rank, len(inner_shape)))
if ragged_rank == 0 or (ragged_rank is None and (max_depth < 2 or (inner_shape is not None and max_depth - len(inner_shape) < 2))):
    return inner_factory(pylist, dtype, inner_shape)
if inner_shape is None:
    if ragged_rank is None:
        inner_shape = ()
    else:
        inner_shape = _default_inner_shape_for_pylist(pylist, ragged_rank)
if ragged_rank is None:
    if scalar_depth is None:
        ragged_rank = max(1, max_depth - 1)
    else:
        ragged_rank = max(1, scalar_depth - 1 - len(inner_shape))
nested_splits = []
values = pylist
for dim in range(ragged_rank):
    nested_splits.append([0])
    concatenated_values = []
    for row in values:
        nested_splits[dim].append(nested_splits[dim][-1] + len(row))
        concatenated_values.extend(row)
    values = concatenated_values
values = inner_factory(values, dtype=dtype, shape=(len(values),) + inner_shape, name='values')
for row_splits in reversed(nested_splits):
    values = ragged_factory(values, row_splits)
return values