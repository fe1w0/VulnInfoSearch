@staticmethod
def _process(tlist):

    def get_next_comment():
        return tlist.token_next_by(i=sql.Comment, t=T.Comment)

    def _get_insert_token(token):
        """Returns either a whitespace or the line breaks from token."""
        m = re.search('((\\r|\\n)+) *$', token.value)
        if m is not None:
            return sql.Token(T.Whitespace.Newline, m.groups()[0])
        else:
            return sql.Token(T.Whitespace, ' ')
    (tidx, token) = get_next_comment()
    while token:
        (pidx, prev_) = tlist.token_prev(tidx, skip_ws=False)
        (nidx, next_) = tlist.token_next(tidx, skip_ws=False)
        if prev_ is None or next_ is None or prev_.is_whitespace or prev_.match(T.Punctuation, '(') or next_.is_whitespace or next_.match(T.Punctuation, ')'):
            if prev_ is not None and (not prev_.match(T.Punctuation, '(')):
                tlist.tokens.insert(tidx, _get_insert_token(token))
            tlist.tokens.remove(token)
        else:
            tlist.tokens[tidx] = _get_insert_token(token)
        (tidx, token) = get_next_comment()