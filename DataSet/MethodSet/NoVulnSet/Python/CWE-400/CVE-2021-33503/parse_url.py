"\n    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n    performed to parse incomplete urls. Fields not provided will be None.\n    This parser is RFC 3986 compliant.\n\n    The parser logic and helper functions are based heavily on\n    work done in the ``rfc3986`` module.\n\n    :param str url: URL to parse into a :class:`.Url` namedtuple.\n\n    Partly backwards-compatible with :mod:`urlparse`.\n\n    Example::\n\n        >>> parse_url('http://google.com/mail/')\n        Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n        >>> parse_url('google.com:80')\n        Url(scheme=None, host='google.com', port=80, path=None, ...)\n        >>> parse_url('/foo?bar')\n        Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n    "
if not url:
    return Url()
source_url = url
if not SCHEME_RE.search(url):
    url = '//' + url
try:
    (scheme, authority, path, query, fragment) = URI_RE.match(url).groups()
    normalize_uri = scheme is None or scheme.lower() in NORMALIZABLE_SCHEMES
    if scheme:
        scheme = scheme.lower()
    if authority:
        (auth, _, host_port) = authority.rpartition('@')
        auth = auth or None
        (host, port) = _HOST_PORT_RE.match(host_port).groups()
        if auth and normalize_uri:
            auth = _encode_invalid_chars(auth, USERINFO_CHARS)
        if port == '':
            port = None
    else:
        (auth, host, port) = (None, None, None)
    if port is not None:
        port = int(port)
        if not 0 <= port <= 65535:
            raise LocationParseError(url)
    host = _normalize_host(host, scheme)
    if normalize_uri and path:
        path = _remove_path_dot_segments(path)
        path = _encode_invalid_chars(path, PATH_CHARS)
    if normalize_uri and query:
        query = _encode_invalid_chars(query, QUERY_CHARS)
    if normalize_uri and fragment:
        fragment = _encode_invalid_chars(fragment, FRAGMENT_CHARS)
except (ValueError, AttributeError):
    return six.raise_from(LocationParseError(source_url), None)
if not path:
    if query is not None or fragment is not None:
        path = ''
    else:
        path = None
if isinstance(url, six.text_type):
    ensure_func = six.ensure_text
else:
    ensure_func = six.ensure_str

def ensure_type(x):
    return x if x is None else ensure_func(x)
return Url(scheme=ensure_type(scheme), auth=ensure_type(auth), host=ensure_type(host), port=port, path=ensure_type(path), query=ensure_type(query), fragment=ensure_type(fragment))