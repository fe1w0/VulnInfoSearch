def _external_call_helper(contract_address, contract_sig, args_ir, context, value=None, gas=None, skip_contract_check=None, expr=None):
    if value is None:
        value = 0
    if gas is None:
        gas = 'gas'
    if skip_contract_check is None:
        skip_contract_check = False
    assert len(contract_sig.base_args) <= len(args_ir) <= len(contract_sig.args)
    if context.is_constant() and contract_sig.mutability not in ('view', 'pure'):
        raise StateAccessViolation(f"May not call state modifying function '{contract_sig.name}' within {context.pp_constancy()}.", expr)
    sub = ['seq']
    (buf, arg_packer, args_ofst, args_len) = _pack_arguments(contract_sig, args_ir, context)
    (ret_unpacker, ret_ofst, ret_len) = _unpack_returndata(buf, contract_sig, skip_contract_check, context, expr)
    sub += arg_packer
    if contract_sig.return_type is None and (not skip_contract_check):
        sub.append(['assert', ['extcodesize', contract_address]])
    if context.is_constant() or contract_sig.mutability in ('view', 'pure'):
        call_op = ['staticcall', gas, contract_address, args_ofst, args_len, ret_ofst, ret_len]
    else:
        call_op = ['call', gas, contract_address, value, args_ofst, args_len, ret_ofst, ret_len]
    sub.append(check_external_call(call_op))
    if contract_sig.return_type is not None:
        sub += ret_unpacker
    return IRnode.from_list(sub, typ=contract_sig.return_type, location=MEMORY)