external_contract = f'\n@external\ndef ok() -> {typ}:\n    return 1\n\n@external\ndef should_fail() -> int256:\n    return -2**255 # OOB for all int/uint types with less than 256 bits\n    '
code = f'\ninterface BadContract:\n    def ok() -> {typ}: view\n    def should_fail() -> {typ}: view\n\nfoo: BadContract\n\n@external\ndef __init__(addr: BadContract):\n    self.foo = addr\n\n\n@external\ndef test_ok() -> {typ}:\n    return self.foo.ok()\n\n@external\ndef test_fail() -> {typ}:\n    return self.foo.should_fail()\n\n@external\ndef test_fail2() -> {typ}:\n    x: {typ} = self.foo.should_fail()\n    return x\n\n@external\ndef test_fail3() -> int256:\n    return convert(self.foo.should_fail(), int256)\n    '
bad_c = get_contract(external_contract)
c = get_contract(code, bad_c.address, interface_codes={'BadCode': {'type': 'vyper', 'code': external_contract}})
assert bad_c.ok() == 1
assert bad_c.should_fail() == -2 ** 255
assert c.test_ok() == 1
assert_tx_failed(lambda : c.test_fail())
assert_tx_failed(lambda : c.test_fail2())
assert_tx_failed(lambda : c.test_fail3())