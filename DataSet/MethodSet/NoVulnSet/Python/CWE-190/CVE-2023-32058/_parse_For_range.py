def _parse_For_range(self):
    if 'type' in self.stmt.target._metadata:
        iter_typ = self.stmt.target._metadata['type']
    else:
        iter_typ = INT256_T
    arg0 = self.stmt.iter.args[0]
    num_of_args = len(self.stmt.iter.args)
    if num_of_args == 1:
        arg0_val = self._get_range_const_value(arg0)
        start = IRnode.from_list(0, typ=iter_typ)
        rounds = arg0_val
    elif self._check_valid_range_constant(self.stmt.iter.args[1]).is_literal:
        arg0_val = self._get_range_const_value(arg0)
        arg1_val = self._get_range_const_value(self.stmt.iter.args[1])
        start = IRnode.from_list(arg0_val, typ=iter_typ)
        rounds = IRnode.from_list(arg1_val - arg0_val, typ=iter_typ)
    else:
        arg1 = self.stmt.iter.args[1]
        rounds = self._get_range_const_value(arg1.right)
        start = Expr.parse_value_expr(arg0, self.context)
        (_, hi) = start.typ.int_bounds
        start = clamp('le', start, hi + 1 - rounds)
    r = rounds if isinstance(rounds, int) else rounds.value
    if r < 1:
        return
    varname = self.stmt.target.id
    i = IRnode.from_list(self.context.fresh_varname('range_ix'), typ=UINT256_T)
    iptr = self.context.new_variable(varname, iter_typ)
    self.context.forvars[varname] = True
    loop_body = ['seq']
    loop_body.append(['mstore', iptr, i])
    loop_body.append(parse_body(self.stmt.body, self.context))
    ir_node = IRnode.from_list(['repeat', i, start, rounds, rounds, loop_body])
    del self.context.forvars[varname]
    return ir_node