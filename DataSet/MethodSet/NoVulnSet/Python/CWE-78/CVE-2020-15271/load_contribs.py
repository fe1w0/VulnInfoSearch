def load_contribs(contrib_names, safe_contribs, ignore_load_failure=False):
    """Load all contrib modules specified by ``contrib_names``. These should
    all be namespaced packages under the ``lookatmecontrib`` namespace. E.g.
    ``lookatmecontrib.calendar`` would be an extension provided by a
    contrib module, and would be added to an ``extensions`` list in a slide's
    YAML header as ``calendar``.

    ``safe_contribs`` is a set of contrib names that are manually provided
    by the user by the ``-e`` flag or env variable of extensions to auto-load.
    """
    if contrib_names is None:
        return
    errors = []
    all_warnings = []
    for contrib_name in contrib_names:
        module_name = f'lookatme.contrib.{contrib_name}'
        try:
            mod = __import__(module_name, fromlist=[contrib_name])
        except Exception as e:
            if ignore_load_failure:
                continue
            errors.append(str(e))
        else:
            if contrib_name not in safe_contribs:
                ext_warnings = validate_extension_mod(contrib_name, mod)
                if len(ext_warnings) > 0:
                    all_warnings.append((contrib_name, ext_warnings))
            CONTRIB_MODULES.append(mod)
    if len(errors) > 0:
        raise Exception('Error loading one or more extensions:\n\n' + '\n'.join(errors))
    if len(all_warnings) == 0:
        return
    print('\nExtension-provided user warnings:')
    for (ext_name, ext_warnings) in all_warnings:
        print('\n  {!r}:\n'.format(ext_name))
        for ext_warning in ext_warnings:
            print('    * {}'.format(ext_warning))
    print('')
    if not lookatme.prompt.yes('Continue anyways?'):
        exit(1)