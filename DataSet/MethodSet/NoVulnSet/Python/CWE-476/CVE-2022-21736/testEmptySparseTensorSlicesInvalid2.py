@combinations.generate(combinations.combine(tf_api_version=1, mode=['graph']))
def testEmptySparseTensorSlicesInvalid2(self):
    """Test a dataset based on invalid `tf.sparse.SparseTensor`."""
    st = array_ops.sparse_placeholder(dtypes.float64)
    iterator = dataset_ops.make_initializable_iterator(dataset_ops.Dataset.from_sparse_tensor_slices(st))
    init_op = iterator.initializer
    with self.cached_session() as sess:
        empty_indices = [[]]
        empty_values = []
        dense_shape = [1, 1]
        sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, empty_values, dense_shape)
        with self.assertRaises(errors.InvalidArgumentError):
            sess.run(init_op, feed_dict={st: sparse_feed})