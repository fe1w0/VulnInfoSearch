@combinations.generate(combinations.combine(tf_api_version=1, mode=['graph']))
def testEmptySparseTensorSlicesInvalid(self):
    """Test a dataset based on invalid `tf.sparse.SparseTensor`."""
    st = array_ops.sparse_placeholder(dtypes.float64)
    iterator = dataset_ops.make_initializable_iterator(dataset_ops.Dataset.from_sparse_tensor_slices(st))
    init_op = iterator.initializer
    with self.cached_session() as sess:
        empty_indices = np.empty((0, 4), dtype=np.int64)
        non_empty_values = [1, 2, 3, 4]
        empty_dense_shape = [0, 4, 37, 9]
        sparse_feed = sparse_tensor.SparseTensorValue(empty_indices, non_empty_values, empty_dense_shape)
        with self.assertRaises(errors.InvalidArgumentError):
            sess.run(init_op, feed_dict={st: sparse_feed})