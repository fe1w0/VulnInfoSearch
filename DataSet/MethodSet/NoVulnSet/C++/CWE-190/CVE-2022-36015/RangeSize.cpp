Status RangeSize(const Tensor* start_t, const Tensor* limit_t,
                 const Tensor* delta_t, InferenceContext* const c) {
  T start = start_t->scalar<T>()();
  T limit = limit_t->scalar<T>()();
  T delta = delta_t->scalar<T>()();
  if (start > limit && delta > T(0)) {
    return errors::InvalidArgument(
        "Requires start <= limit when delta > 0: ", start, "/", limit);
  }
  if (start < limit && delta < T(0)) {
    return errors::InvalidArgument(
        "Requires start >= limit when delta < 0: ", start, "/", limit);
  }
  if (delta == T(0)) {
    return errors::InvalidArgument("Requires delta != 0");
  }

  int64_t size;
  if (std::is_integral<T>::value) {
    size = Eigen::divup(static_cast<int64_t>(Eigen::numext::abs(limit - start)),
                        static_cast<int64_t>(Eigen::numext::abs(delta)));
  } else {
    auto size_auto =
        Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));
    if (size_auto > std::numeric_limits<int64_t>::max()) {
      return errors::InvalidArgument("Requires ((limit - start) / delta) <= ",
                                     std::numeric_limits<int64_t>::max());
    }
    size = static_cast<int64_t>(size_auto);
  }

  c->set_output(0, c->Vector(static_cast<int64_t>(size)));
  return Status::OK();
}