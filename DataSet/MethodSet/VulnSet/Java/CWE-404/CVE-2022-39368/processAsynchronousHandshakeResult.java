public class DTLSConnector implements Connector, RecordLayer {
	public static final String KEY_TLS_SERVER_HOST_NAME = "TLS_SERVER_HOST_NAME";
	public static final Logger LOGGER = LoggerFactory.getLogger(DTLSConnector.class);
	public static final Logger DROP_LOGGER = LoggerFactory.getLogger(LOGGER.getName() + ".drops");
	public static final int MAX_PLAINTEXT_FRAGMENT_LENGTH = 16384; // max. DTLSPlaintext.length (2^14 bytes)
	public static final int MAX_CIPHERTEXT_EXPANSION = CipherSuite.getOverallMaxCiphertextExpansion();
	public static final int MAX_DATAGRAM_BUFFER_SIZE = MAX_PLAINTEXT_FRAGMENT_LENGTH
	public static final int TLS12_CID_PADDING = 0;
	public static final long CLIENT_HELLO_TIMEOUT_MILLIS = TimeUnit.SECONDS.toMillis(60);
	public static final boolean MDC_SUPPORT;
	public final DtlsConnectorConfig config;
	public final ResumptionSupportingConnectionStore connectionStore;
	public final Long autoResumptionTimeoutMillis;
	public final int thresholdHandshakesWithoutVerifiedPeer;
	public final AtomicInteger pendingHandshakesWithoutVerifiedPeer = new AtomicInteger();
	public final DtlsHealth health;
	public final boolean serverOnly;
	public final String defaultHandshakeMode;
	public final int useExtendedWindowFilter;
	public final boolean useFilter;
	public final boolean useCidUpdateAddressOnNewerRecordFilter;
	public final AtomicInteger pendingOutboundMessagesCountdown = new AtomicInteger();
	public final List<Thread> receiverThreads = new LinkedList<Thread>();
	public final ConnectionIdGenerator connectionIdGenerator;
	public final ProtocolVersion protocolVersionForHelloVerifyRequests;
	public ScheduledFuture<?> statusLogger;
	public InetSocketAddress lastBindAddress;
	public Integer maximumTransmissionUnit;
	public int ipv4Mtu = DEFAULT_IPV4_MTU;
	public int ipv6Mtu = DEFAULT_IPV6_MTU;
	public int inboundDatagramBufferSize = MAX_DATAGRAM_BUFFER_SIZE;
	public CookieGenerator cookieGenerator = new CookieGenerator();
	public Object alertHandlerLock= new Object();
	public volatile DatagramSocket socket;
	public ScheduledExecutorService timer;
	public AtomicBoolean running = new AtomicBoolean(false);
	public volatile EndpointContextMatcher endpointContextMatcher;
	public volatile RawDataChannel messageHandler;
	public AlertHandler alertHandler;
	public SessionListener sessionListener;
	public ConnectionExecutionListener connectionExecutionListener;
	public ExecutorService executorService;
	public boolean hasInternalExecutor;
	public void processAsynchronousHandshakeResult(final HandshakeResult handshakeResult) {
		final Connection connection = connectionStore.get(handshakeResult.getConnectionId());
		if (connection != null && connection.hasOngoingHandshake()) {
			SerialExecutor serialExecutor = connection.getExecutor();

			try {

				serialExecutor.execute(new Runnable() {

					@Override
					public void run() {
						if (running.get()) {
							Handshaker handshaker = connection.getOngoingHandshake();
							if (handshaker != null) {
								try {
									handshaker.processAsyncHandshakeResult(handshakeResult);
								} catch (HandshakeException e) {
									handleExceptionDuringHandshake(e, connection, null);
								} catch (IllegalStateException e) {
									LOGGER.warn("Exception while processing handshake result [{}]", connection, e);
								}
							} else {
								LOGGER.debug("No ongoing handshake for result [{}]", connection);
							}
						} else {
							LOGGER.debug("Execution stopped while processing handshake result [{}]", connection);
						}
					}
				});
			} catch (RejectedExecutionException e) {
				// dont't terminate connection on shutdown!
				LOGGER.debug("Execution rejected while processing handshake result [{}]", connection, e);
			} catch (RuntimeException e) {
				LOGGER.warn("Unexpected error occurred while processing handshake result [{}]", connection, e);
			}
		} else {
			LOGGER.debug("No connection or ongoing handshake for handshake result [{}]", connection);
		}
	}
}