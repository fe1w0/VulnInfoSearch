public class SerialExecutor extends AbstractExecutorService {
	public final void scheduleNextJob() {
		lock.lock();
		try {
			currentlyExecutedJob = tasks.poll();
			if (currentlyExecutedJob != null) {
				final Runnable command = currentlyExecutedJob;
				executor.execute(new Runnable() {

					@Override
					public void run() {
						try {
							try {
								setOwner();
								ExecutionListener current = listener.get();
								try {
									if (current != null) {
										current.beforeExecution();
									}
									command.run();
								} catch (Throwable t) {
									LOGGER.error("unexpected error occurred:", t);
								} finally {
									try {
										if (current != null) {
											current.afterExecution();
										}
									} catch (Throwable t) {
										LOGGER.error("unexpected error occurred:", t);
									}
									clearOwner();
								}
							} finally {
								scheduleNextJob();
							}
						} catch (RejectedExecutionException ex) {
							LOGGER.debug("shutdown?", ex);
						}
					}
				});
			} else if (shutdown) {
				terminated.signalAll();
			}
		} finally {
			lock.unlock();
		}
	}
}