public class Shell
{
    public static final char[] DEFAULT_QUOTING_TRIGGER_CHARS = { ' ' };
    public String shellCommand;
    public List<String> shellArgs = new ArrayList<String>();
    public boolean quotedArgumentsEnabled = true;
    public String executable;
    public String workingDir;
    public boolean quotedExecutableEnabled = true;
    public boolean doubleQuotedArgumentEscaped = false;
    public boolean singleQuotedArgumentEscaped = false;
    public boolean doubleQuotedExecutableEscaped = false;
    public boolean singleQuotedExecutableEscaped = false;
    public char argQuoteDelimiter = '\"';
    public char exeQuoteDelimiter = '\"';
    public String argumentEscapePattern = "\\%s";
    public List<String> getRawCommandLine( String executable, String[] arguments )
    {
        List<String> commandLine = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();

        if ( executable != null )
        {
            String preamble = getExecutionPreamble();
            if ( preamble != null )
            {
                sb.append( preamble );
            }

            if ( isQuotedExecutableEnabled() )
            {
                char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );

                sb.append( StringUtils.quoteAndEscape( getExecutable(), getExecutableQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', false ) );
            }
            else
            {
                sb.append( getExecutable() );
            }
        }
        for ( int i = 0; i < arguments.length; i++ )
        {
            if ( sb.length() > 0 )
            {
                sb.append( " " );
            }

            if ( isQuotedArgumentsEnabled() )
            {
                char[] escapeChars = getEscapeChars( isSingleQuotedArgumentEscaped(), isDoubleQuotedArgumentEscaped() );

                sb.append( StringUtils.quoteAndEscape( arguments[i], getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), getArgumentEscapePattern(), false ) );
            }
            else
            {
                sb.append( arguments[i] );
            }
        }

        commandLine.add( sb.toString() );

        return commandLine;
    }
}