public class XStream {
    public ReflectionProvider reflectionProvider;
    public HierarchicalStreamDriver hierarchicalStreamDriver;
    public ClassLoaderReference classLoaderReference;
    public MarshallingStrategy marshallingStrategy;
    public ConverterLookup converterLookup;
    public ConverterRegistry converterRegistry;
    public Mapper mapper;
    public PackageAliasingMapper packageAliasingMapper;
    public ClassAliasingMapper classAliasingMapper;
    public FieldAliasingMapper fieldAliasingMapper;
    public ElementIgnoringMapper elementIgnoringMapper;
    public AttributeAliasingMapper attributeAliasingMapper;
    public SystemAttributeAliasingMapper systemAttributeAliasingMapper;
    public AttributeMapper attributeMapper;
    public DefaultImplementationsMapper defaultImplementationsMapper;
    public ImmutableTypesMapper immutableTypesMapper;
    public ImplicitCollectionMapper implicitCollectionMapper;
    public LocalConversionMapper localConversionMapper;
    public SecurityMapper securityMapper;
    public AnnotationConfiguration annotationConfiguration;
    public transient boolean securityInitialized;
    public transient boolean securityWarningGiven;
    public static final int NO_REFERENCES = 1001;
    public static final int ID_REFERENCES = 1002;
    public static final int XPATH_RELATIVE_REFERENCES = 1003;
    public static final int XPATH_ABSOLUTE_REFERENCES = 1004;
    public static final int SINGLE_NODE_XPATH_RELATIVE_REFERENCES = 1005;
    public static final int SINGLE_NODE_XPATH_ABSOLUTE_REFERENCES = 1006;
    public static final int PRIORITY_VERY_HIGH = 10000;
    public static final int PRIORITY_NORMAL = 0;
    public static final int PRIORITY_LOW = -10;
    public static final int PRIORITY_VERY_LOW = -20;
    public static final String ANNOTATION_MAPPER_TYPE = "com.thoughtworks.xstream.mapper.AnnotationMapper";
    public static final Pattern IGNORE_ALL = Pattern.compile(".*");
    public static final Pattern LAZY_ITERATORS = Pattern.compile(".*\\$LazyIterator");
    public static final Pattern JAVAX_CRYPTO = Pattern.compile("javax\\.crypto\\..*");
    public void setupSecurity() {
        if (securityMapper == null) {
            return;
        }

        addPermission(AnyTypePermission.ANY);
        denyTypes(new String[]{"java.beans.EventHandler"});
        denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, JAVAX_CRYPTO});
        allowTypeHierarchy(Exception.class);
        securityInitialized = false;
    }
}