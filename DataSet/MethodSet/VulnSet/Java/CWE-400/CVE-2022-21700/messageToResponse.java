class RoutingInBoundHandler extends SimpleChannelInboundHandler<io.micronaut.http.HttpRequest<?>> {
    private static final Logger LOG = LoggerFactory.getLogger(RoutingInBoundHandler.class);
    private static final Pattern IGNORABLE_ERROR_MESSAGE = Pattern.compile(
    private final Router router;
    private final ExecutorSelector executorSelector;
    private final StaticResourceResolver staticResourceResolver;
    private final ExecutorService ioExecutor;
    private final BeanLocator beanLocator;
    private final NettyHttpServerConfiguration serverConfiguration;
    private final RequestArgumentSatisfier requestArgumentSatisfier;
    private final MediaTypeCodecRegistry mediaTypeCodecRegistry;
    private final NettyCustomizableResponseTypeHandlerRegistry customizableResponseTypeHandlerRegistry;
    public MutableHttpResponse<?> messageToResponse(RouteMatch<?> finalRoute, Object message) {
        MutableHttpResponse<?> response;
        if (message instanceof HttpResponse) {
            response = ConversionService.SHARED.convert(message, NettyMutableHttpResponse.class)
                    .orElseThrow(() -> new InternalServerException("Emitted response is not mutable"));
        } else {
            if (message instanceof HttpStatus) {
                response = HttpResponse.status((HttpStatus) message);
            } else {
                response = forStatus(finalRoute.getAnnotationMetadata()).body(message);
            }
        }
        return response;
    }
}