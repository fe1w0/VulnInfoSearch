public class Composer {
    public final Parser parser;
    public final Resolver resolver;
    public final Map<String, Node> anchors;
    public final Set<Node> recursiveNodes;
    public int nonScalarAliasesCount = 0;
    public final LoaderOptions loadingConfig;
    public final CommentEventsCollector blockCommentsCollector;
    public final CommentEventsCollector inlineCommentsCollector;
    public Node getSingleNode() {
        // Drop the STREAM-START event.
        parser.getEvent();
        // Compose a document if the stream is not empty.
        Node document = null;
        if (!parser.checkEvent(Event.ID.StreamEnd)) {
            document = getNode();
        }
        // Ensure that the stream contains no more documents.
        if (!parser.checkEvent(Event.ID.StreamEnd)) {
            Event event = parser.getEvent();
            Mark contextMark = document != null ? document.getStartMark(): null;
            throw new ComposerException("expected a single document in the stream",
                    contextMark, "but found another document", event.getStartMark());
        }
        // Drop the STREAM-END event.
        parser.getEvent();
        return document;
    }
}