def _unpack_returndata(buf, contract_sig, skip_contract_check, context):
    return_t = contract_sig.return_type
    if return_t is None:
        return (['pass'], 0, 0)
    return_t = calculate_type_for_external_return(return_t)
    should_unwrap_abi_tuple = return_t != contract_sig.return_type
    abi_return_t = return_t.abi_type
    min_return_size = abi_return_t.min_size()
    max_return_size = abi_return_t.size_bound()
    assert 0 < min_return_size <= max_return_size
    ret_ofst = buf
    ret_len = max_return_size
    ret = []
    if not skip_contract_check:
        ret += [['assert', ['gt', 'returndatasize', min_return_size - 1]]]
    buf = IRnode(buf, typ=return_t, encoding=_returndata_encoding(contract_sig), location=MEMORY)
    if should_unwrap_abi_tuple:
        buf = get_element_ptr(buf, 0, array_bounds_check=False)
    ret += [buf]
    return (ret, ret_ofst, ret_len)