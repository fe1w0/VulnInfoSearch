def test_multiple_matching_realm_patterns(self) -> None:
    realm = get_realm('zulip')
    url_format_string = 'https://trac.example.com/ticket/%(id)s'
    linkifier_1 = RealmFilter(realm=realm, pattern='(?P<id>ABC\\-[0-9]+)(?![A-Z0-9-])', url_format_string=url_format_string)
    linkifier_1.save()
    self.assertEqual(linkifier_1.__str__(), '<RealmFilter(zulip): (?P<id>ABC\\-[0-9]+)(?![A-Z0-9-]) https://trac.example.com/ticket/%(id)s>')
    url_format_string = 'https://other-trac.example.com/ticket/%(id)s'
    linkifier_2 = RealmFilter(realm=realm, pattern='(?P<id>[A-Z][A-Z0-9]*\\-[0-9]+)(?![A-Z0-9-])', url_format_string=url_format_string)
    linkifier_2.save()
    self.assertEqual(linkifier_2.__str__(), '<RealmFilter(zulip): (?P<id>[A-Z][A-Z0-9]*\\-[0-9]+)(?![A-Z0-9-]) https://other-trac.example.com/ticket/%(id)s>')
    msg = Message(sender=self.example_user('othello'))
    msg.set_topic_name('ABC-123')
    flush_per_request_caches()
    content = 'We should fix ABC-123 or [trac ABC-123](https://trac.example.com/ticket/16) today.'
    converted = markdown_convert(content, message_realm=realm, message=msg)
    converted_topic = topic_links(realm.id, msg.topic_name())
    self.assertEqual(converted, '<p>We should fix <a href="https://trac.example.com/ticket/ABC-123">ABC-123</a> or <a href="https://trac.example.com/ticket/16">trac ABC-123</a> today.</p>')
    self.assertEqual(converted_topic, [{'url': 'https://trac.example.com/ticket/ABC-123', 'text': 'ABC-123'}, {'url': 'https://other-trac.example.com/ticket/ABC-123', 'text': 'ABC-123'}])