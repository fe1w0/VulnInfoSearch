'lookatme - An interactive, terminal-based markdown presentation tool.\n    '
if debug:
    lookatme.config.LOG = lookatme.log.create_log(log_path)
else:
    lookatme.config.LOG = lookatme.log.create_null_log()
if len(input_files) == 0:
    input_files = [io.StringIO('')]
preload_exts = [x.strip() for x in extensions.split(',')]
preload_exts = list(filter(lambda x: x != '', preload_exts))
pres = Presentation(input_files[0], theme, code_style, live_reload=live_reload, single_slide=single_slide, preload_extensions=preload_exts)
if dump_styles:
    print(StyleSchema().dumps(pres.styles))
    return 0
try:
    pres.run()
except Exception as e:
    number = pres.tui.curr_slide.number + 1
    click.echo(f'Error rendering slide {number}: {e}')
    if not debug:
        click.echo('Rerun with --debug to view the full traceback in logs')
    else:
        lookatme.config.LOG.exception(f'Error rendering slide {number}: {e}')
        click.echo(f'See {log_path} for traceback')
    raise click.Abort()