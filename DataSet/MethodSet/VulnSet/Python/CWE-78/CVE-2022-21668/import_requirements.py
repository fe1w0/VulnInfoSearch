from pipenv.patched.notpip._vendor import requests as pip_requests
from pipenv.patched.notpip._internal.req.constructors import install_req_from_parsed_requirement
from pipenv.vendor.pip_shims.shims import parse_requirements
if r:
    assert os.path.isfile(r)
if r is None:
    r = project.requirements_location
with open(r) as f:
    contents = f.read()
indexes = []
trusted_hosts = []
for line in contents.split('\n'):
    (index, extra_index, trusted_host, _) = parse_indexes(line.strip(), strict=True)
    if index:
        indexes = [index]
    if extra_index:
        indexes.append(extra_index)
    if trusted_host:
        trusted_hosts.append(trusted_host)
indexes = sorted(set(indexes))
trusted_hosts = sorted(set(trusted_hosts))
reqs = [install_req_from_parsed_requirement(f) for f in parse_requirements(r, session=pip_requests)]
for package in reqs:
    if package.name not in BAD_PACKAGES:
        if package.link is not None:
            package_string = f'-e {package.link}' if package.editable else str(package.link)
            project.add_package_to_pipfile(package_string, dev=dev)
        else:
            project.add_package_to_pipfile(str(package.req), dev=dev)
for index in indexes:
    trusted = index in trusted_hosts
    project.add_index_to_pipfile(index, verify_ssl=trusted)
project.recase_pipfile()